#+TITLE: Companion Material: Experiments and Plots

* Experiments
** Experiment ~EXP_europar_2021_travel_pessimistic_2021-11-29_12_48_42_607a~
*** Results data
#+BEGIN_EXAMPLE
./data/Carbon_travel_emissions-europar_2021_2021-11-29_12_48_42_607a.csv
#+END_EXAMPLE

Also available with the link
https://travel-footprint-calculator.irap.omp.eu/estimation/2021-11-29_12:48:42_607a.html

*** How to reproduce the results
1. Access the travel emissions calculator
   https://travel-footprint-calculator.irap.omp.eu/estimate.html
2. Set the "Destination Cities" as ~Lisbon,Portugal~
3. Use the City/Country data present in the following csv file as "Origin
   Cities"
#+BEGIN_EXAMPLE
./data/Euro-Par2021-CityCountry-Data-Processed.csv
#+END_EXAMPLE
4. Use models
   - ADEME (2021, mul. factor=2, from Carbon database)
   - MYCLIMATE (mul. factor=2)
   - DEFRA (mul. factor=RFI=1.9)
Information on how we obtained the above input data is in the history.
*** The analysis
Let's start by opening the results csv file
#+begin_src python :results value :session *python* :exports both
import pandas as pd

df_results_europar_travel_2021=pd.read_csv('./data/Carbon_travel_emissions-europar_2021_2021-11-29_12_48_42_607a.csv')
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location  ... train trips_amount
0                Lisbon,  Portugal  ...                  5
1              Caparica,  Portugal  ...                  1
2               Dagorda,  Portugal  ...                  1
3                 Braga,  Portugal  ...                  1
4   Santiago de Compostela,  Spain  ...                  1
..                             ...  ...                ...
93                 Beijing,  China  ...                  0
94          Auckland,  New Zealand  ...                  0
95             Seoul,  South Korea  ...                  0
96          Suwon-si,  South Korea  ...                  0
97       Oak Ridge,  United States  ...                  0

[98 rows x 10 columns]
#+end_example

The ~plane trips_ammount~ and ~train trips_ammount~ indicate how many participants
came from a certain city/country. Let's add a ~nb_participants~ column, as a sum
of these two abovementioned columns to simplify the analysis

**** Computing ~nb_participants~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['nb_participants']=df_results_europar_travel_2021['plane trips_amount']+df_results_europar_travel_2021['train trips_amount']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location  ... nb_participants
0                Lisbon,  Portugal  ...               5
1              Caparica,  Portugal  ...               1
2               Dagorda,  Portugal  ...               1
3                 Braga,  Portugal  ...               1
4   Santiago de Compostela,  Spain  ...               1
..                             ...  ...             ...
93                 Beijing,  China  ...               2
94          Auckland,  New Zealand  ...               1
95             Seoul,  South Korea  ...               2
96          Suwon-si,  South Korea  ...               2
97       Oak Ridge,  United States  ...               4

[98 rows x 11 columns]
#+end_example

**** Computing ~co2_kg_per_pers~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['co2_kg_per_pers']=df_results_europar_travel_2021['co2_kg']/df_results_europar_travel_2021['nb_participants']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location  ... co2_kg_per_pers
0                Lisbon,  Portugal  ...         0.00000
1              Caparica,  Portugal  ...         0.52000
2               Dagorda,  Portugal  ...         3.79600
3                 Braga,  Portugal  ...        19.24600
4   Santiago de Compostela,  Spain  ...        27.90500
..                             ...  ...             ...
93                 Beijing,  China  ...      3153.40150
94          Auckland,  New Zealand  ...      6363.30700
95             Seoul,  South Korea  ...      3395.86450
96          Suwon-si,  South Korea  ...      3405.79150
97       Oak Ridge,  United States  ...      2115.64075

[98 rows x 12 columns]
#+end_example

Now i need to recreate the participant list, one line for each participant, with
city/country data and the co2 emissions of the participant, assuming that each
participant from a city/country took a different flight/train.

**** Reconstructing the participant list with CO2 emissions
#+begin_src python :results value :session *python* :exports both
#i'm gonna do the lazy method
lst_participants=[]

for index,row in df_results_europar_travel_2021.iterrows():
    for nb_part in range(row['nb_participants']):
        lst_participants.append({'city': row['city'],
                                 'country': row['country'],
                                 'dst_lisbon_km': row['distance_km']/row['nb_participants'],
                                 'co2_kg': row['co2_kg_per_pers']})

df_participants=pd.DataFrame(lst_participants)
df_participants=df_participants.sort_values('co2_kg').reset_index(drop=True)
df_participants
#+end_src

#+RESULTS:
#+begin_example
                 city       country  dst_lisbon_km     co2_kg
0              Lisbon      Portugal         0.0000     0.0000
1              Lisbon      Portugal         0.0000     0.0000
2              Lisbon      Portugal         0.0000     0.0000
3              Lisbon      Portugal         0.0000     0.0000
4              Lisbon      Portugal         0.0000     0.0000
..                ...           ...            ...        ...
132             Seoul   South Korea     20837.9765  3395.8645
133          Suwon-si   South Korea     20899.5030  3405.7915
134          Suwon-si   South Korea     20899.5030  3405.7915
135  Hong Kong Island         China     22054.3040  3592.1090
136          Auckland   New Zealand     39230.2410  6363.3070

[137 rows x 4 columns]
#+end_example

**** Calculating percentages per participant
Here i'm using the sorted list of participants in order of ~co2_kg~ to calculate:
(i) the cumulative percentage of participants (percentiles of participants),
(ii) the percentage of total CO2 emissions per participant, (iii) the cumulative
percentage of CO2 emissions of the participants and (iv) cumulative total CO2
emissions of the participants.

#+begin_src python :results value :session *python* :exports both
total_nb_part=len(df_participants.index)
total_co2_kg=df_participants['co2_kg'].sum()

#percentile
df_participants['percentile']=df_participants.index/total_nb_part
#% of total emissions per participant
df_participants['percent_total_co2_kg']=df_participants['co2_kg']/total_co2_kg
#cumulative of co2
df_participants['cum_co2_kg']=df_participants['co2_kg'].cumsum()
#% of cumulative co2
df_participants['percent_cum_total_co2_kg']=df_participants['cum_co2_kg']/total_co2_kg
df_participants
#+end_src

#+RESULTS:
#+begin_example
                 city       country  ...   cum_co2_kg  percent_cum_total_co2_kg
0              Lisbon      Portugal  ...       0.0000                  0.000000
1              Lisbon      Portugal  ...       0.0000                  0.000000
2              Lisbon      Portugal  ...       0.0000                  0.000000
3              Lisbon      Portugal  ...       0.0000                  0.000000
4              Lisbon      Portugal  ...       0.0000                  0.000000
..                ...           ...  ...          ...                       ...
132             Seoul   South Korea  ...  156485.4540                  0.903222
133          Suwon-si   South Korea  ...  159891.2455                  0.922880
134          Suwon-si   South Korea  ...  163297.0370                  0.942538
135  Hong Kong Island         China  ...  166889.1460                  0.963271
136          Auckland   New Zealand  ...  173252.4530                  1.000000

[137 rows x 8 columns]
#+end_example

And we should be good to plot!
**** Saving results to summary csv

#+begin_SRC python :results output :session *python* :exports both
kco2_total_emissions=df_participants['cum_co2_kg'].max()
print(kco2_total_emissions)
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2021,
             'method':'travel_est_pessimistic',
             'kco2_cost_laptop':0.0,
             'kco2_cost_network':0.0 ,
             'kco2_cost_server':0.0,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
: 173252.453

*** Plots
**** ~percentile~ x ~percent_cum_total_co2_kg~ x ~country~

#+begin_src python :results file :session *python* :exports both
import seaborn as sns
import matplotlib.pyplot as plt

FIG_PATH='./Figures/EXP_europar_2021_travel_2021-11-29_12_48_42_607a_percpart_x_perc_total_co2.png'

SMALL_SIZE = 5
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
FIG_WIDTH = 5
FIG_HEIGHT = 3
SCATTERPLOT_POINT_SIZE=8

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
scatterplot_kwargs={'s': SCATTERPLOT_POINT_SIZE, 'palette': 'plasma'}


plt.clf()
plt.figure(figsize=(FIG_WIDTH,FIG_HEIGHT))
ax = sns.scatterplot(x='percentile', y='percent_cum_total_co2_kg', hue='country', data=df_participants, **scatterplot_kwargs)
ax.legend(title='Country', loc='upper center', fancybox=True, shadow=False, ncol=6, bbox_to_anchor=(0.5, -0.2), markerscale=0.5)
ax.set_title('Euro-Par 2021: Estimated travel CO2 emissions')
ax.set_xlabel('% of participants (sorted by per participant CO2 emissions)')
ax.set_ylabel('% of total CO2 emissions')
fig = ax.get_figure()
fig.tight_layout()
fig.savefig(FIG_PATH, format='png', dpi=300, bbox_inches='tight')
FIG_PATH
#+end_src

#+RESULTS:
[[file:]]

*** Saving the dataframe for the paper plot

#+begin_SRC python :results output :session *python* :eval no-export :exports results
df_participants_paperplot=df_participants.copy()
df_participants_paperplot['model_set']='Pessimistic'
df_participants_paperplot.to_csv('./data/travel_europar_2021_plot_data.csv', index=False)
print(df_participants_paperplot)
#+end_SRC

#+RESULTS:
#+begin_example
city       country  dst_lisbon_km     co2_kg  percentile  percent_total_co2_kg   cum_co2_kg  percent_cum_total_co2_kg    model_set
0              Lisbon      Portugal         0.0000     0.0000    0.000000              0.000000       0.0000                  0.000000  Pessimistic
1              Lisbon      Portugal         0.0000     0.0000    0.007299              0.000000       0.0000                  0.000000  Pessimistic
2              Lisbon      Portugal         0.0000     0.0000    0.014599              0.000000       0.0000                  0.000000  Pessimistic
3              Lisbon      Portugal         0.0000     0.0000    0.021898              0.000000       0.0000                  0.000000  Pessimistic
4              Lisbon      Portugal         0.0000     0.0000    0.029197              0.000000       0.0000                  0.000000  Pessimistic
..                ...           ...            ...        ...         ...                   ...          ...                       ...          ...
132             Seoul   South Korea     20837.9765  3395.8645    0.963504              0.019601  156485.4540                  0.903222  Pessimistic
133          Suwon-si   South Korea     20899.5030  3405.7915    0.970803              0.019658  159891.2455                  0.922880  Pessimistic
134          Suwon-si   South Korea     20899.5030  3405.7915    0.978102              0.019658  163297.0370                  0.942538  Pessimistic
135  Hong Kong Island         China     22054.3040  3592.1090    0.985401              0.020733  166889.1460                  0.963271  Pessimistic
136          Auckland   New Zealand     39230.2410  6363.3070    0.992701              0.036729  173252.4530                  1.000000  Pessimistic

[137 rows x 9 columns]
#+end_example
** Experiment ~EXP_europar_2021_travel_optimistic_Carbon_travel_emissions-europar_2021_2022-01-20_09_11_46_3047~
*** Results data
#+BEGIN_EXAMPLE
./data/Carbon_travel_emissions-europar_2021_2022-01-20_09_11_46_3047.csv
#+END_EXAMPLE

Also available with the link
https://travel-footprint-calculator.irap.omp.eu/estimation/2022-01-20_09:11:46_3047.html
*** How to reproduce the results
1. Access the travel emissions calculator
   https://travel-footprint-calculator.irap.omp.eu/estimate.html
2. Set the "Destination Cities" as ~Lisbon,Portugal~
3. Use the City/Country data present in the following csv file as "Origin
   Cities"
#+BEGIN_EXAMPLE
./data/Euro-Par2021-CityCountry-Data-Processed.csv
#+END_EXAMPLE
4. Use models (more optimisitic models)
   - French Ministry of Ecology (no mul. factor, not recommended)
   - KLM data best fit (no mul. factor, not recommended)
   - ICAO data best fit (no mul. factor, not recommended)
Information on how we obtained the above input data is in the history.
*** The analysis
Let's start by opening the results csv file
#+begin_src python :results value :session *python* :exports both
import pandas as pd

df_results_europar_travel_2021=pd.read_csv('./data/Carbon_travel_emissions-europar_2021_2022-01-20_09_11_46_3047.csv')
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location                    city         country                                            address  ...    co2_kg  distance_km  plane trips_amount  train trips_amount
0                Lisbon,  Portugal                  Lisbon        Portugal  Lisbon, Grande Lisboa, Área Metropolitana de L...  ...     0.000        0.000                   0                   5
1              Caparica,  Portugal                Caparica        Portugal  Caparica, Caparica e Trafaria, Almada, Setúbal...  ...     0.520       17.383                   0                   1
2               Dagorda,  Portugal                 Dagorda        Portugal  Dagorda, Vermelha, Cadaval, Lisbon, 2550-500, ...  ...     3.796      126.966                   0                   1
3                 Braga,  Portugal                   Braga        Portugal                                    Braga, Portugal  ...    19.246      643.693                   0                   1
4   Santiago de Compostela,  Spain  Santiago de Compostela           Spain  Santiago de Compostela, Santiago, A Coruña, Ga...  ...    27.905      933.268                   0                   1
..                             ...                     ...             ...                                                ...  ...       ...          ...                 ...                 ...
93          Auckland,  New Zealand                Auckland     New Zealand   Auckland, Waitematā, Auckland, 1010, New Zealand  ...  2719.647    39230.241                   1                   0
94                 Beijing,  China                 Beijing           China  Beijing, Dongcheng District, Beijing, 100010, ...  ...  2757.689    38670.374                   2                   0
95             Seoul,  South Korea                   Seoul     South Korea                       Seoul, Nowon-gu, South Korea  ...  3038.697    41675.953                   2                   0
96          Suwon-si,  South Korea                Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...  3050.202    41799.006                   2                   0
97       Oak Ridge,  United States               Oak Ridge   United States  Oak Ridge, Anderson County, Tennessee, 37830, ...  ...  3971.684    51612.507                   4                   0

[98 rows x 10 columns]
#+end_example

The ~plane trips_ammount~ and ~train trips_ammount~ indicate how many participants
came from a certain city/country. Let's add a ~nb_participants~ column, as a sum
of these two abovementioned columns to simplify the analysis

**** Computing ~nb_participants~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['nb_participants']=df_results_europar_travel_2021['plane trips_amount']+df_results_europar_travel_2021['train trips_amount']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location                    city         country  ... plane trips_amount  train trips_amount  nb_participants
0                Lisbon,  Portugal                  Lisbon        Portugal  ...                  0                   5                5
1              Caparica,  Portugal                Caparica        Portugal  ...                  0                   1                1
2               Dagorda,  Portugal                 Dagorda        Portugal  ...                  0                   1                1
3                 Braga,  Portugal                   Braga        Portugal  ...                  0                   1                1
4   Santiago de Compostela,  Spain  Santiago de Compostela           Spain  ...                  0                   1                1
..                             ...                     ...             ...  ...                ...                 ...              ...
93          Auckland,  New Zealand                Auckland     New Zealand  ...                  1                   0                1
94                 Beijing,  China                 Beijing           China  ...                  2                   0                2
95             Seoul,  South Korea                   Seoul     South Korea  ...                  2                   0                2
96          Suwon-si,  South Korea                Suwon-si     South Korea  ...                  2                   0                2
97       Oak Ridge,  United States               Oak Ridge   United States  ...                  4                   0                4

[98 rows x 11 columns]
#+end_example

**** Computing ~co2_kg_per_pers~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['co2_kg_per_pers']=df_results_europar_travel_2021['co2_kg']/df_results_europar_travel_2021['nb_participants']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                          location                    city         country  ... train trips_amount  nb_participants  co2_kg_per_pers
0                Lisbon,  Portugal                  Lisbon        Portugal  ...                  5                5           0.0000
1              Caparica,  Portugal                Caparica        Portugal  ...                  1                1           0.5200
2               Dagorda,  Portugal                 Dagorda        Portugal  ...                  1                1           3.7960
3                 Braga,  Portugal                   Braga        Portugal  ...                  1                1          19.2460
4   Santiago de Compostela,  Spain  Santiago de Compostela           Spain  ...                  1                1          27.9050
..                             ...                     ...             ...  ...                ...              ...              ...
93          Auckland,  New Zealand                Auckland     New Zealand  ...                  0                1        2719.6470
94                 Beijing,  China                 Beijing           China  ...                  0                2        1378.8445
95             Seoul,  South Korea                   Seoul     South Korea  ...                  0                2        1519.3485
96          Suwon-si,  South Korea                Suwon-si     South Korea  ...                  0                2        1525.1010
97       Oak Ridge,  United States               Oak Ridge   United States  ...                  0                4         992.9210

[98 rows x 12 columns]
#+end_example

Now i need to recreate the participant list, one line for each participant, with
city/country data and the co2 emissions of the participant, assuming that each
participant from a city/country took a different flight/train.

**** Reconstructing the participant list with CO2 emissions
#+begin_src python :results value :session *python* :exports both
#i'm gonna do the lazy method
lst_participants=[]

for index,row in df_results_europar_travel_2021.iterrows():
    for nb_part in range(row['nb_participants']):
        lst_participants.append({'city': row['city'],
                                 'country': row['country'],
                                 'dst_lisbon_km': row['distance_km']/row['nb_participants'],
                                 'co2_kg': row['co2_kg_per_pers']})

df_participants=pd.DataFrame(lst_participants)
df_participants=df_participants.sort_values('co2_kg').reset_index(drop=True)
df_participants
#+end_src

#+RESULTS:
#+begin_example
                 city       country  dst_lisbon_km     co2_kg
0              Lisbon      Portugal         0.0000     0.0000
1              Lisbon      Portugal         0.0000     0.0000
2              Lisbon      Portugal         0.0000     0.0000
3              Lisbon      Portugal         0.0000     0.0000
4              Lisbon      Portugal         0.0000     0.0000
..                ...           ...            ...        ...
132             Seoul   South Korea     20837.9765  1519.3485
133          Suwon-si   South Korea     20899.5030  1525.1010
134          Suwon-si   South Korea     20899.5030  1525.1010
135  Hong Kong Island         China     22054.3040  1599.5070
136          Auckland   New Zealand     39230.2410  2719.6470

[137 rows x 4 columns]
#+end_example

**** Calculating percentages per participant
Here i'm using the sorted list of participants in order of ~co2_kg~ to calculate:
(i) the cumulative percentage of participants (percentiles of participants),
(ii) the percentage of total CO2 emissions per participant, (iii) the cumulative
percentage of CO2 emissions of the participants and (iv) cumulative total CO2
emissions of the participants.

#+begin_src python :results value :session *python* :exports both
total_nb_part=len(df_participants.index)
total_co2_kg=df_participants['co2_kg'].sum()

#percentile
df_participants['percentile']=df_participants.index/total_nb_part
#% of total emissions per participant
df_participants['percent_total_co2_kg']=df_participants['co2_kg']/total_co2_kg
#cumulative of co2
df_participants['cum_co2_kg']=df_participants['co2_kg'].cumsum()
#% of cumulative co2
df_participants['percent_cum_total_co2_kg']=df_participants['cum_co2_kg']/total_co2_kg
df_participants
#+end_src

#+RESULTS:
#+begin_example
                 city       country  dst_lisbon_km     co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg
0              Lisbon      Portugal         0.0000     0.0000    0.000000              0.000000       0.000                  0.000000
1              Lisbon      Portugal         0.0000     0.0000    0.007299              0.000000       0.000                  0.000000
2              Lisbon      Portugal         0.0000     0.0000    0.014599              0.000000       0.000                  0.000000
3              Lisbon      Portugal         0.0000     0.0000    0.021898              0.000000       0.000                  0.000000
4              Lisbon      Portugal         0.0000     0.0000    0.029197              0.000000       0.000                  0.000000
..                ...           ...            ...        ...         ...                   ...         ...                       ...
132             Seoul   South Korea     20837.9765  1519.3485    0.963504              0.017956   77247.244                  0.912909
133          Suwon-si   South Korea     20899.5030  1525.1010    0.970803              0.018024   78772.345                  0.930933
134          Suwon-si   South Korea     20899.5030  1525.1010    0.978102              0.018024   80297.446                  0.948956
135  Hong Kong Island         China     22054.3040  1599.5070    0.985401              0.018903   81896.953                  0.967859
136          Auckland   New Zealand     39230.2410  2719.6470    0.992701              0.032141   84616.600                  1.000000

[137 rows x 8 columns]
#+end_example

And we should be good to plot!
**** Saving results to summary csv

#+begin_SRC python :results value :session *python* :exports both
kco2_total_emissions=df_participants['cum_co2_kg'].max()
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2021,
             'method':'travel_est_optimistic',
             'kco2_cost_laptop':0.0,
             'kco2_cost_network':0.0 ,
             'kco2_cost_server':0.0,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year                 method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021             travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021                    iea          9.269246           6.484279          1.747373        17.500898
: 2  2020                    iea          9.072270           9.199432          3.591304        21.863007
: 3  2021                 nature         12.639882          11.272893          3.734797        27.647571
: 4  2020                 nature         12.371278          15.993175         12.169521        40.533974
: 5  2021  travel_est_optimistic          0.000000           0.000000          0.000000     84616.600000
*** Saving results for the paper plots

#+begin_SRC python :results output :session *python* :eval no-export :exports results
df_participants_paperplot=df_participants.copy()
df_participants_paperplot['model_set']='Optimistic'
df_participants_paperplot.to_csv('./data/travel_europar_2021_plot_data.csv', index=False, header=False, mode='a')
print(df_participants_paperplot)
#+end_SRC

#+RESULTS:
#+begin_example
city       country  dst_lisbon_km     co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg   model_set
0              Lisbon      Portugal         0.0000     0.0000    0.000000              0.000000       0.000                  0.000000  Optimistic
1              Lisbon      Portugal         0.0000     0.0000    0.007299              0.000000       0.000                  0.000000  Optimistic
2              Lisbon      Portugal         0.0000     0.0000    0.014599              0.000000       0.000                  0.000000  Optimistic
3              Lisbon      Portugal         0.0000     0.0000    0.021898              0.000000       0.000                  0.000000  Optimistic
4              Lisbon      Portugal         0.0000     0.0000    0.029197              0.000000       0.000                  0.000000  Optimistic
..                ...           ...            ...        ...         ...                   ...         ...                       ...         ...
132             Seoul   South Korea     20837.9765  1519.3485    0.963504              0.017956   77247.244                  0.912909  Optimistic
133          Suwon-si   South Korea     20899.5030  1525.1010    0.970803              0.018024   78772.345                  0.930933  Optimistic
134          Suwon-si   South Korea     20899.5030  1525.1010    0.978102              0.018024   80297.446                  0.948956  Optimistic
135  Hong Kong Island         China     22054.3040  1599.5070    0.985401              0.018903   81896.953                  0.967859  Optimistic
136          Auckland   New Zealand     39230.2410  2719.6470    0.992701              0.032141   84616.600                  1.000000  Optimistic

[137 rows x 9 columns]
#+end_example
** Experiment ~EXP_europar_2020_travel_pessimistic_2022-01-24_09_46_56_4123~
*** Results data
#+BEGIN_EXAMPLE
./data/Carbon_travel_emissions-europar_2020_2022-01-24_09_46_56_4123.csv
#+END_EXAMPLE

Also available with the link
https://travel-footprint-calculator.irap.omp.eu/estimation/2022-01-24_09:46:56_4123.html
*** How to reproduce the results
1. Access the travel emissions calculator
   https://travel-footprint-calculator.irap.omp.eu/estimate.html
2. Set the "Destination Cities" as ~Warsaw,Poland~
3. Use the City/Country data present in the following csv file as "Origin
   Cities"
#+BEGIN_EXAMPLE
./data/Euro-Par2020-CityCountry-Data-Processed.csv
#+END_EXAMPLE
4. Use models
   - ADEME (2021, mul. factor=2, from Carbon database)
   - MYCLIMATE (mul. factor=2)
   - DEFRA (mul. factor=RFI=1.9)
Information on how we obtained the above input data is in the history.
*** The analysis
Let's start by opening the results csv file
#+begin_src python :results value :session *python* :exports both
import pandas as pd

df_results_europar_travel_2021=pd.read_csv('./data/Carbon_travel_emissions-europar_2020_2022-01-24_09_46_56_4123.csv')
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...     co2_kg  distance_km  plane trips_amount  train trips_amount
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...      0.000        0.000                   0                  15
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...      8.009      267.870                   0                   1
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...      9.170      306.685                   0                   1
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...     10.541      352.556                   0                   1
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...     11.032      368.969                   0                   1
..                           ...          ...             ...                                                ...  ...        ...          ...                 ...                 ...
111      Atlanta,  United States      Atlanta   United States     Atlanta, Fulton County, Georgia, United States  ...   5256.358    32159.694                   2                   0
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...   6286.603    38545.173                   2                   0
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...   6611.190    40556.969                   2                   0
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...  10163.794    62156.766                   4                   0
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...  24307.298   133027.054                  24                   0

[116 rows x 10 columns]
#+end_example

The ~plane trips_ammount~ and ~train trips_ammount~ indicate how many participants
came from a certain city/country. Let's add a ~nb_participants~ column, as a sum
of these two abovementioned columns to simplify the analysis

**** Computing ~nb_participants~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['nb_participants']=df_results_europar_travel_2021['plane trips_amount']+df_results_europar_travel_2021['train trips_amount']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...  distance_km  plane trips_amount  train trips_amount  nb_participants
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...        0.000                   0                  15               15
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...      267.870                   0                   1                1
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...      306.685                   0                   1                1
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...      352.556                   0                   1                1
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...      368.969                   0                   1                1
..                           ...          ...             ...                                                ...  ...          ...                 ...                 ...              ...
111      Atlanta,  United States      Atlanta   United States     Atlanta, Fulton County, Georgia, United States  ...    32159.694                   2                   0                2
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...    38545.173                   2                   0                2
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...    40556.969                   2                   0                2
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...    62156.766                   4                   0                4
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...   133027.054                  24                   0               24

[116 rows x 11 columns]
#+end_example

**** Computing ~co2_kg_per_pers~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['co2_kg_per_pers']=df_results_europar_travel_2021['co2_kg']/df_results_europar_travel_2021['nb_participants']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...  plane trips_amount  train trips_amount  nb_participants  co2_kg_per_pers
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...                   0                  15               15         0.000000
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...                   0                   1                1         8.009000
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...                   0                   1                1         9.170000
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...                   0                   1                1        10.541000
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...                   0                   1                1        11.032000
..                           ...          ...             ...                                                ...  ...                 ...                 ...              ...              ...
111      Atlanta,  United States      Atlanta   United States     Atlanta, Fulton County, Georgia, United States  ...                   2                   0                2      2628.179000
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...                   2                   0                2      3143.301500
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...                   2                   0                2      3305.595000
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...                   4                   0                4      2540.948500
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...                  24                   0               24      1012.804083

[116 rows x 12 columns]
#+end_example

Now i need to recreate the participant list, one line for each participant, with
city/country data and the co2 emissions of the participant, assuming that each
participant from a city/country took a different flight/train.

**** Reconstructing the participant list with CO2 emissions
#+begin_src python :results value :session *python* :exports both
#i'm gonna do the lazy method
lst_participants=[]

for index,row in df_results_europar_travel_2021.iterrows():
    for nb_part in range(row['nb_participants']):
        lst_participants.append({'city': row['city'],
                                 'country': row['country'],
                                 'dst_lisbon_km': row['distance_km']/row['nb_participants'],
                                 'co2_kg': row['co2_kg_per_pers']})

df_participants=pd.DataFrame(lst_participants)
df_participants=df_participants.sort_values('co2_kg').reset_index(drop=True)
df_participants
#+end_src

#+RESULTS:
#+begin_example
             city     country  dst_lisbon_km    co2_kg
0          Warsaw      Poland          0.000     0.000
1          Warsaw      Poland          0.000     0.000
2          Warsaw      Poland          0.000     0.000
3          Warsaw      Poland          0.000     0.000
4          Warsaw      Poland          0.000     0.000
..            ...         ...            ...       ...
216   Santo André      Brazil      21328.188  3474.956
217  Porto Alegre      Brazil      23022.979  3748.397
218   Santa Maria      Brazil      23262.515  3787.044
219      La Plata   Argentina      24657.796  4012.162
220     Melbourne   Australia      30916.253  5021.913

[221 rows x 4 columns]
#+end_example

**** Calculating percentages per participant
Here i'm using the sorted list of participants in order of ~co2_kg~ to calculate:
(i) the cumulative percentage of participants (percentiles of participants),
(ii) the percentage of total CO2 emissions per participant, (iii) the cumulative
percentage of CO2 emissions of the participants and (iv) cumulative total CO2
emissions of the participants.

#+begin_src python :results value :session *python* :exports both
total_nb_part=len(df_participants.index)
total_co2_kg=df_participants['co2_kg'].sum()

#percentile
df_participants['percentile']=df_participants.index/total_nb_part
#% of total emissions per participant
df_participants['percent_total_co2_kg']=df_participants['co2_kg']/total_co2_kg
#cumulative of co2
df_participants['cum_co2_kg']=df_participants['co2_kg'].cumsum()
#% of cumulative co2
df_participants['percent_cum_total_co2_kg']=df_participants['cum_co2_kg']/total_co2_kg
df_participants
#+end_src

#+RESULTS:
#+begin_example
             city     country  dst_lisbon_km    co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg
0          Warsaw      Poland          0.000     0.000    0.000000              0.000000       0.000                  0.000000
1          Warsaw      Poland          0.000     0.000    0.004525              0.000000       0.000                  0.000000
2          Warsaw      Poland          0.000     0.000    0.009050              0.000000       0.000                  0.000000
3          Warsaw      Poland          0.000     0.000    0.013575              0.000000       0.000                  0.000000
4          Warsaw      Poland          0.000     0.000    0.018100              0.000000       0.000                  0.000000
..            ...         ...            ...       ...         ...                   ...         ...                       ...
216   Santo André      Brazil      21328.188  3474.956    0.977376              0.016228  197558.552                  0.922619
217  Porto Alegre      Brazil      23022.979  3748.397    0.981900              0.017505  201306.949                  0.940124
218   Santa Maria      Brazil      23262.515  3787.044    0.986425              0.017686  205093.993                  0.957810
219      La Plata   Argentina      24657.796  4012.162    0.990950              0.018737  209106.155                  0.976547
220     Melbourne   Australia      30916.253  5021.913    0.995475              0.023453  214128.068                  1.000000

[221 rows x 8 columns]
#+end_example

And we should be good to plot!
**** Saving results to summary csv

#+begin_SRC python :results value :session *python* :exports both
kco2_total_emissions=df_participants['cum_co2_kg'].max()
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2020,
             'method':'travel_est_pessimistic',
             'kco2_cost_laptop':0.0,
             'kco2_cost_network':0.0 ,
             'kco2_cost_server':0.0,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year                 method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021             travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021                    iea          9.269246           6.484279          1.747373        17.500898
: 2  2020                    iea          9.072270           9.199432          3.591304        21.863007
: 3  2021                 nature         12.639882          11.272893          3.734797        27.647571
: 4  2020                 nature         12.371278          15.993175         12.169521        40.533974
: 5  2021  travel_est_optimistic          0.000000           0.000000          0.000000     84616.600000
: 6  2020             travel_est          0.000000           0.000000          0.000000    214128.068000

*** Saving the dataframe for the paper plot

#+begin_SRC python :results output :session *python* :eval no-export :exports results
df_participants_paperplot=df_participants.copy()
df_participants_paperplot['model_set']='Pessimistic'
df_participants_paperplot.to_csv('./data/travel_europar_2020_plot_data.csv', index=False)
print(df_participants_paperplot)
#+end_SRC

#+RESULTS:
#+begin_example
city     country  dst_lisbon_km    co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg    model_set
0          Warsaw      Poland          0.000     0.000    0.000000              0.000000       0.000                  0.000000  Pessimistic
1          Warsaw      Poland          0.000     0.000    0.004525              0.000000       0.000                  0.000000  Pessimistic
2          Warsaw      Poland          0.000     0.000    0.009050              0.000000       0.000                  0.000000  Pessimistic
3          Warsaw      Poland          0.000     0.000    0.013575              0.000000       0.000                  0.000000  Pessimistic
4          Warsaw      Poland          0.000     0.000    0.018100              0.000000       0.000                  0.000000  Pessimistic
..            ...         ...            ...       ...         ...                   ...         ...                       ...          ...
216   Santo André      Brazil      21328.188  3474.956    0.977376              0.016228  197558.552                  0.922619  Pessimistic
217  Porto Alegre      Brazil      23022.979  3748.397    0.981900              0.017505  201306.949                  0.940124  Pessimistic
218   Santa Maria      Brazil      23262.515  3787.044    0.986425              0.017686  205093.993                  0.957810  Pessimistic
219      La Plata   Argentina      24657.796  4012.162    0.990950              0.018737  209106.155                  0.976547  Pessimistic
220     Melbourne   Australia      30916.253  5021.913    0.995475              0.023453  214128.068                  1.000000  Pessimistic

[221 rows x 9 columns]
#+end_example
** Experiment ~EXP_europar_2020_travel_optimistic_Carbon_travel_emissions-europar_2021_2022-01-24_10:02:14_b2fc~
*** Results data
#+BEGIN_EXAMPLE
./data/Carbon_travel_emissions-europar_2020_2022-01-24_10_02_14_b2fc.csv
#+END_EXAMPLE

Also available with the link
https://travel-footprint-calculator.irap.omp.eu/estimation/2022-01-24_10:02:14_b2fc.html
*** How to reproduce the results
1. Access the travel emissions calculator
   https://travel-footprint-calculator.irap.omp.eu/estimate.html
2. Set the "Destination Cities" as ~Warsaw,Poland~
3. Use the City/Country data present in the following csv file as "Origin
   Cities"
#+BEGIN_EXAMPLE
./data/Euro-Par2020-CityCountry-Data-Processed.csv
#+END_EXAMPLE
4. Use models (more optimisitic models)
   - French Ministry of Ecology (no mul. factor, not recommended)
   - KLM data best fit (no mul. factor, not recommended)
   - ICAO data best fit (no mul. factor, not recommended)
Information on how we obtained the above input data is in the history.
*** The analysis
Let's start by opening the results csv file
#+begin_src python :results value :session *python* :exports both
import pandas as pd

df_results_europar_travel_2021=pd.read_csv('./data/Carbon_travel_emissions-europar_2020_2022-01-24_10_02_14_b2fc.csv')
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...     co2_kg  distance_km  plane trips_amount  train trips_amount
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...      0.000        0.000                   0                  15
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...      8.009      267.870                   0                   1
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...      9.170      306.685                   0                   1
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...     10.541      352.556                   0                   1
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...     11.032      368.969                   0                   1
..                           ...          ...             ...                                                ...  ...        ...          ...                 ...                 ...
111        Thuwal,  Saudi Arabia       Thuwal    Saudi Arabia  Thuwal, Governorate of Jidda, Makkah Region, 2...  ...   2738.445    29574.594                   4                   0
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...   2745.983    38545.173                   2                   0
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...   2934.077    40556.969                   2                   0
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...   4583.256    62156.766                   4                   0
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...  12856.531   133027.054                  24                   0

[116 rows x 10 columns]
#+end_example

The ~plane trips_ammount~ and ~train trips_ammount~ indicate how many participants
came from a certain city/country. Let's add a ~nb_participants~ column, as a sum
of these two abovementioned columns to simplify the analysis

**** Computing ~nb_participants~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['nb_participants']=df_results_europar_travel_2021['plane trips_amount']+df_results_europar_travel_2021['train trips_amount']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...  distance_km  plane trips_amount  train trips_amount  nb_participants
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...        0.000                   0                  15               15
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...      267.870                   0                   1                1
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...      306.685                   0                   1                1
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...      352.556                   0                   1                1
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...      368.969                   0                   1                1
..                           ...          ...             ...                                                ...  ...          ...                 ...                 ...              ...
111        Thuwal,  Saudi Arabia       Thuwal    Saudi Arabia  Thuwal, Governorate of Jidda, Makkah Region, 2...  ...    29574.594                   4                   0                4
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...    38545.173                   2                   0                2
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...    40556.969                   2                   0                2
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...    62156.766                   4                   0                4
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...   133027.054                  24                   0               24

[116 rows x 11 columns]
#+end_example

**** Computing ~co2_kg_per_pers~
#+begin_src python :results value :session *python* :exports both
df_results_europar_travel_2021['co2_kg_per_pers']=df_results_europar_travel_2021['co2_kg']/df_results_europar_travel_2021['nb_participants']
df_results_europar_travel_2021
#+end_src

#+RESULTS:
#+begin_example
                        location         city         country                                            address  ...  plane trips_amount  train trips_amount  nb_participants  co2_kg_per_pers
0                Warsaw,  Poland       Warsaw          Poland               Warsaw, Masovian Voivodeship, Poland  ...                   0                  15               15         0.000000
1              Nałęczów,  Poland     Nałęczów          Poland  Nałęczów, gmina Nałęczów, Puławy County, Lubli...  ...                   0                   1                1         8.009000
2             Amsterdam,  Poland    Amsterdam          Poland  Amsterdam, 6d, Lwowska, Kolejarz, Kalinowszczy...  ...                   0                   1                1         9.170000
3             Białystok,  Poland    Białystok          Poland   Białystok, Podlaskie Voivodeship, 15-426, Poland  ...                   0                   1                1        10.541000
4                 Toruń,  Poland        Toruń          Poland  Toruń, Toruń County, Kuyavian-Pomeranian Voivo...  ...                   0                   1                1        11.032000
..                           ...          ...             ...                                                ...  ...                 ...                 ...              ...              ...
111        Thuwal,  Saudi Arabia       Thuwal    Saudi Arabia  Thuwal, Governorate of Jidda, Makkah Region, 2...  ...                   4                   0                4       684.611250
112  Los Angeles,  United States  Los Angeles   United States             Los Angeles, California, United States  ...                   2                   0                2      1372.991500
113        San José,  Costa Rica     San José      Costa Rica  San José, Cantón San José, San Jose Province, ...  ...                   2                   0                2      1467.038500
114       Suwon-si,  South Korea     Suwon-si     South Korea                    Suwon-si, Gyeonggi, South Korea  ...                   4                   0                4      1145.814000
115          Reykjavik,  Iceland    Reykjavik         Iceland                 Reykjavik, Capital Region, Iceland  ...                  24                   0               24       535.688792

[116 rows x 12 columns]
#+end_example

Now i need to recreate the participant list, one line for each participant, with
city/country data and the co2 emissions of the participant, assuming that each
participant from a city/country took a different flight/train.

**** Reconstructing the participant list with CO2 emissions
#+begin_src python :results value :session *python* :exports both
#i'm gonna do the lazy method
lst_participants=[]

for index,row in df_results_europar_travel_2021.iterrows():
    for nb_part in range(row['nb_participants']):
        lst_participants.append({'city': row['city'],
                                 'country': row['country'],
                                 'dst_lisbon_km': row['distance_km']/row['nb_participants'],
                                 'co2_kg': row['co2_kg_per_pers']})

df_participants=pd.DataFrame(lst_participants)
df_participants=df_participants.sort_values('co2_kg').reset_index(drop=True)
df_participants
#+end_src

#+RESULTS:
#+begin_example
             city     country  dst_lisbon_km    co2_kg
0          Warsaw      Poland          0.000     0.000
1          Warsaw      Poland          0.000     0.000
2          Warsaw      Poland          0.000     0.000
3          Warsaw      Poland          0.000     0.000
4          Warsaw      Poland          0.000     0.000
..            ...         ...            ...       ...
216   Santo André      Brazil      21328.188  1552.153
217  Porto Alegre      Brazil      23022.979  1662.680
218   Santa Maria      Brazil      23262.515  1678.302
219      La Plata   Argentina      24657.796  1769.296
220     Melbourne   Australia      30916.253  2177.445

[221 rows x 4 columns]
#+end_example

**** Calculating percentages per participant
Here i'm using the sorted list of participants in order of ~co2_kg~ to calculate:
(i) the cumulative percentage of participants (percentiles of participants),
(ii) the percentage of total CO2 emissions per participant, (iii) the cumulative
percentage of CO2 emissions of the participants and (iv) cumulative total CO2
emissions of the participants.

#+begin_src python :results value :session *python* :exports both
total_nb_part=len(df_participants.index)
total_co2_kg=df_participants['co2_kg'].sum()

#percentile
df_participants['percentile']=df_participants.index/total_nb_part
#% of total emissions per participant
df_participants['percent_total_co2_kg']=df_participants['co2_kg']/total_co2_kg
#cumulative of co2
df_participants['cum_co2_kg']=df_participants['co2_kg'].cumsum()
#% of cumulative co2
df_participants['percent_cum_total_co2_kg']=df_participants['cum_co2_kg']/total_co2_kg
df_participants
#+end_src

#+RESULTS:
#+begin_example
             city     country  dst_lisbon_km    co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg
0          Warsaw      Poland          0.000     0.000    0.000000              0.000000       0.000                  0.000000
1          Warsaw      Poland          0.000     0.000    0.004525              0.000000       0.000                  0.000000
2          Warsaw      Poland          0.000     0.000    0.009050              0.000000       0.000                  0.000000
3          Warsaw      Poland          0.000     0.000    0.013575              0.000000       0.000                  0.000000
4          Warsaw      Poland          0.000     0.000    0.018100              0.000000       0.000                  0.000000
..            ...         ...            ...       ...         ...                   ...         ...                       ...
216   Santo André      Brazil      21328.188  1552.153    0.977376              0.014581   99165.487                  0.931541
217  Porto Alegre      Brazil      23022.979  1662.680    0.981900              0.015619  100828.167                  0.947159
218   Santa Maria      Brazil      23262.515  1678.302    0.986425              0.015766  102506.469                  0.962925
219      La Plata   Argentina      24657.796  1769.296    0.990950              0.016620  104275.765                  0.979546
220     Melbourne   Australia      30916.253  2177.445    0.995475              0.020454  106453.210                  1.000000

[221 rows x 8 columns]
#+end_example

And we should be good to plot!
**** Saving results to summary csv

#+begin_SRC python :results value :session *python* :exports both
kco2_total_emissions=df_participants['cum_co2_kg'].max()
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2020,
             'method':'travel_est_optimistic',
             'kco2_cost_laptop':0.0,
             'kco2_cost_network':0.0 ,
             'kco2_cost_server':0.0,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year                 method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021             travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021                    iea          9.269246           6.484279          1.747373        17.500898
: 2  2020                    iea          9.072270           9.199432          3.591304        21.863007
: 3  2021                 nature         12.639882          11.272893          3.734797        27.647571
: 4  2020                 nature         12.371278          15.993175         12.169521        40.533974
: 5  2021  travel_est_optimistic          0.000000           0.000000          0.000000     84616.600000
: 6  2020             travel_est          0.000000           0.000000          0.000000    214128.068000
: 7  2020  travel_est_optimistic          0.000000           0.000000          0.000000    106453.210000
*** Saving results for the paper plots

#+begin_SRC python :results output :session *python* :eval no-export :exports results
df_participants_paperplot=df_participants.copy()
df_participants_paperplot['model_set']='Optimistic'
df_participants_paperplot.to_csv('./data/travel_europar_2020_plot_data.csv', index=False, header=False, mode='a')
print(df_participants_paperplot)
#+end_SRC

#+RESULTS:
#+begin_example
city     country  dst_lisbon_km    co2_kg  percentile  percent_total_co2_kg  cum_co2_kg  percent_cum_total_co2_kg   model_set
0          Warsaw      Poland          0.000     0.000    0.000000              0.000000       0.000                  0.000000  Optimistic
1          Warsaw      Poland          0.000     0.000    0.004525              0.000000       0.000                  0.000000  Optimistic
2          Warsaw      Poland          0.000     0.000    0.009050              0.000000       0.000                  0.000000  Optimistic
3          Warsaw      Poland          0.000     0.000    0.013575              0.000000       0.000                  0.000000  Optimistic
4          Warsaw      Poland          0.000     0.000    0.018100              0.000000       0.000                  0.000000  Optimistic
..            ...         ...            ...       ...         ...                   ...         ...                       ...         ...
216   Santo André      Brazil      21328.188  1552.153    0.977376              0.014581   99165.487                  0.931541  Optimistic
217  Porto Alegre      Brazil      23022.979  1662.680    0.981900              0.015619  100828.167                  0.947159  Optimistic
218   Santa Maria      Brazil      23262.515  1678.302    0.986425              0.015766  102506.469                  0.962925  Optimistic
219      La Plata   Argentina      24657.796  1769.296    0.990950              0.016620  104275.765                  0.979546  Optimistic
220     Melbourne   Australia      30916.253  2177.445    0.995475              0.020454  106453.210                  1.000000  Optimistic

[221 rows x 9 columns]
#+end_example
** Experiment ~EXP_europar_2021_virtual_per_participant_emissions_iea_model~
In this experiment we estimate the carbon emissions of the virtual conference,
but using the participants' country CO2 intensity to calculate the CO2 emissions
for the network and laptop emissions. Here we are going to use the iea model.
*** Reading participants data
This data is given by Leonel. Here i'm only interested in the participant's
country, and the attendance per day. We have data about attendance per session
but i'm not using it for the moment.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_participants=pd.read_csv('./data/Euro-Par2021-1630695535.csv')
## getting only the country and the sessions attendance
columns=['Country','1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

df_participants=df_participants[columns]
## getting only the country and the attendance per day
#df_participants=df_participants[['Country','30/08/2021','31/08/2021','01/09/2021','02/09/2021','03/09/2021']]
## filtering dashes
df_participants=df_participants.loc[~df_participants['Country'].str.contains('-')]
## filling nans with zeros
df_participants=df_participants.fillna(0.0)
## renaming columns
df_participants.columns=columns
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
           Country   1A   1B   1C   2A   2B   2C  ...   20   21   22   23   24   25   26
0          Czechia  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
1           Sweden  0.0  0.0  0.0  0.0  0.0  0.0  ...  1.0  0.0  0.0  0.0  0.0  0.0  0.0
4            Italy  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
6           France  1.0  0.0  0.0  1.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
9               UK  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
..             ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...
155         Greece  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
157        Germany  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  1.0  0.0  0.0  1.0  1.0  0.0
159   Saudi Arabia  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
160  United States  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0
161      Hong Kong  1.0  1.0  1.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0

[138 rows x 39 columns]
#+end_example

*** Reading number of hours per conference session

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_hours_att=pd.read_csv('./data/europar2021-sessions-nbhours-attendance.csv')
df_hours_att
#+end_SRC

#+RESULTS:
#+begin_example
   Session  NB_hours  Attendance Comment
0       1A    1.5000          27        measured from conf site
1       1B    1.5000          21        measured from conf site
2       1C    1.5000          19   measured from conf site
3       2A    7.0000          28        measured from conf site
4       2B    7.5000          18        measured from conf site
5       2C    1.5000          19        measured from conf site
6       3A    1.5000          26        measured from conf site
7       3B    1.5000          24        measured from conf site
8       3C    1.5000          28        measured from conf site
9       4A    1.2500          23          COLOC 3:15 PM-4:30 PM
10      4B    1.2500          20        measured from conf site
11      4C    1.2500          19        measured from conf site
12       5    1.0000          16          COLOC 4:30 PM-5:30 PM
13      6A    1.5000          33        measured from conf site
14      6B    1.5000          13        measured from conf site
15      7A    1.6660          37        measured from conf site
16      7B    1.6660          20        measured from conf site
17      8A    1.2500          37        measured from conf site
18      8B    1.4166          20        measured from conf site
19      9A    1.7500          29        measured from conf site
20      9B    1.2500          20          LSDVE 3:15 PM-4:30 PM
21      10    0.5000          12          LSDVE 4:30 PM-5:00 PM
22      11    0.5000          48        measured from conf site
23      12    1.5000          52        measured from conf site
24      13    1.5000          49        measured from conf site
25      14    1.0000          59        measured from conf site
26      15    1.5000          48        measured from conf site
27      16    1.5000          42        measured from conf site
28      17    1.5000          40        measured from conf site
29      18    1.5000          41        measured from conf site
30      19    1.0000          40        measured from conf site
31      20    1.5000          30        measured from conf site
32      21    1.5000          45        measured from conf site
33      22    1.5000          30        measured from conf site
34      23    1.5000          35        measured from conf site
35      24    1.0000          43        measured from conf site
36      25    1.5000          33        measured from conf site
37      26    0.5000          29        measured from conf site
#+end_example

*** Reading the EU carbon emission intensity

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_co2_kwh_eu=pd.read_csv('./data/co2-emission-intensity-9.csv')
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Date:year']==2020]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Greenhouse gas emission (GHG) intensity:number'].notna()]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Member State:text']!='EU-27']
df_co2_kwh_eu=df_co2_kwh_eu[['Date:year', 'Member State:text', 'Greenhouse gas emission (GHG) intensity:number']]
df_co2_kwh_eu.columns=['year', 'country', 'ghg_intensity']
df_co2_kwh_eu
#+end_SRC

#+RESULTS:
#+begin_example
    year      country ghg_intensity
0   2020       Greece         479.2
1   2020     Bulgaria         410.4
2   2020      Croatia         133.8
3   2020     Portugal         198.4
4   2020       France          51.1
6   2020  Netherlands         328.4
7   2020      Estonia         774.9
9   2020      Germany         311.0
10  2020    Lithuania          45.4
11  2020       Poland         709.8
14  2020       Sweden           8.8
15  2020        Italy         213.4
16  2020      Ireland         278.6
17  2020      Czechia         436.6
19  2020      Belgium         161.0
20  2020      Austria          82.4
22  2020       Latvia         106.5
23  2020        Malta         379.0
24  2020      Hungary         216.4
25  2020      Finland          68.6
26  2020     Slovakia         101.7
28  2020      Denmark         109.0
29  2020     Slovenia         217.8
30  2020        Spain         156.4
31  2020   Luxembourg          58.5
32  2020      Romania         299.5
33  2020       Cyprus         620.9
#+end_example

*** Reading iea model

You can download the IEA data here:
[[https://www.iea.org/data-and-statistics/charts/electricity-per-hour-of-streaming-video-shift-project-compared-to-different-use-cases-2019]]

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_iea_model=pd.read_csv('./data/electricity-per-hour-of-streaming-video-shift-project-compared-to-different-use-cases-2019.csv',skiprows=3)
scenario=df_iea_model.loc[df_iea_model['Scenario']=='Laptop, WiFi, HD']
df_iea_model
#+end_SRC

#+RESULTS:
:                     Scenario  Data centres  Data transmission  Devices
: 0   Shift Project (original)        0.7776             5.2704   0.0128
: 1  Shift Project (corrected)        0.0972             0.6588   0.0128
: 2     IEA average (original)        0.0138             0.1084   0.0555
: 3      IEA average (updated)        0.0037             0.0177   0.0555
: 4          50'' TV, WiFi, 4K        0.0139             0.0182   0.1200
: 5           Laptop, WiFi, HD        0.0060             0.0182   0.0220
: 6          Phone, 4G, 'Auto'        0.0005             0.0085   0.0012

*** Crossing participants with GHG intensity
At this point, we will use the world average for countries that we have missing
GHG intensity data.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000
kco2_kwh_worldavg=0.475
joined_df_participants=pd.merge(df_participants, df_co2_kwh_eu, how='left', left_on='Country', right_on='country')
joined_df_participants=joined_df_participants.loc[:, ~joined_df_participants.columns.isin(['year','country'])]

## Filling NaNs with worldavg, this can be changed
joined_df_participants=joined_df_participants.fillna(kco2_kwh_worldavg*grams_one_kilo)
df_participants=joined_df_participants
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
           Country   1A   1B   1C   2A   2B   2C   3A   3B   3C   4A   4B   4C    5   6A   6B  ...   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26  ghg_intensity
0          Czechia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          436.6
1           Sweden  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0            8.8
2            Italy  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          213.4
3           France  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0           51.1
4               UK  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
..             ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...            ...
133         Greece  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          479.2
134        Germany  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  0.0          311.0
135   Saudi Arabia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
136  United States  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
137      Hong Kong  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  1.0  0.0  ...  1.0  1.0  1.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0          475.0

[138 rows x 40 columns]
#+end_example

*** Calculating the cost of laptops
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
cpy_df_participants=df_participants.copy()

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_laptops'] = 0.0
## converting gco2 to kco2
kco2_kwh_ghg_intensity=pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore')/1000
#print(kco2_kwh_ghg_intensity)
for session in conf_sessions:
    day_nb_hours=df_hours_att.loc[df_hours_att['Session']==session]['NB_hours'].values[0]
    kwh_h_laptop=scenario['Devices'].values[0]
    cpy_df_participants['kco2_emissions_laptops'] = cpy_df_participants['kco2_emissions_laptops'] + (cpy_df_participants[session] * day_nb_hours * kwh_h_laptop * kco2_kwh_ghg_intensity)
cpy_df_participants['kco2_emissions_laptops']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.057631
1      0.001162
2      0.011737
3      0.012928
4      0.047888
         ...
133    0.052712
134    0.129423
135    0.047025
136    0.015675
137    0.209000
Name: kco2_emissions_laptops, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_laptops=cpy_df_participants['kco2_emissions_laptops'].sum()
print(sum_co2_laptops)
#+end_SRC

#+RESULTS:
: 9.269246468679999

*** Calculating the cost of network
Here i'm using the co2 intensity as an average of the co2 intensity of the
participant's country and Lisbon.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_network'] = 0.0
host_country='Portugal'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2
#print(kco2_kwh_ghg_intensity)
for session in conf_sessions:
    day_nb_hours=df_hours_att.loc[df_hours_att['Session']==session]['NB_hours'].values[0]
    kwh_h_laptop=scenario['Data transmission'].values[0]
    cpy_df_participants['kco2_emissions_network'] = cpy_df_participants['kco2_emissions_network'] + (cpy_df_participants[session] * day_nb_hours * kwh_h_laptop * kco2_kwh_ghg_intensity)
cpy_df_participants['kco2_emissions_network']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.034671
1      0.011313
2      0.009368
3      0.026110
4      0.028082
         ...
133    0.030831
134    0.087686
135    0.027576
136    0.009192
137    0.122559
Name: kco2_emissions_network, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_network=cpy_df_participants['kco2_emissions_network'].sum()
print(sum_co2_network)
#+end_SRC

#+RESULTS:
: 6.484279308234001

*** Calculating the cost of the server
I need to do this with the participants attendance. It will be more semantically
correct.

I believe that the iea data center data is per person, hence we need to
multiply with ~Attendance~ as well. There is a "Calculate your emissions" part
at their site
(https://www.iea.org/commentaries/the-carbon-footprint-of-streaming-video-fact-checking-the-headlines)
that just performs a multiplication ~hours x kwh/h_server x co2_intensity~. It
estimates emissions for one person.
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
#df_hours_att['kco2_emissions_server']=df_hours_att['NB_hours']*df_hours_att['Attendance']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_hours_att['kco2_emissions_server']=df_hours_att['NB_hours']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_hours_att
#+end_SRC

#+RESULTS:

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_server'] = 0.0
host_country='Portugal'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
#kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2
kco2_kwh_ghg_intensity=kco2_kwh_ghg_intensity_host
#print(kco2_kwh_ghg_intensity)
for session in conf_sessions:
    day_nb_hours=df_hours_att.loc[df_hours_att['Session']==session]['NB_hours'].values[0]
    kwh_h_laptop=scenario['Data centres'].values[0]
    cpy_df_participants['kco2_emissions_server'] = cpy_df_participants['kco2_emissions_server'] + (cpy_df_participants[session] * day_nb_hours * kwh_h_laptop * kco2_kwh_ghg_intensity)
cpy_df_participants['kco2_emissions_server']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.007142
1      0.007142
2      0.002976
3      0.013690
4      0.005455
         ...
133    0.005952
134    0.022518
135    0.005357
136    0.001786
137    0.023808
Name: kco2_emissions_server, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_server=cpy_df_participants['kco2_emissions_server'].sum()
print(sum_co2_server)
#+end_SRC

#+RESULTS:
: 1.7473726848000004

*** Total emissions (network+laptops+server)
I just need to sum the values

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
kco2_total_emissions=sum_co2_network+sum_co2_laptops+sum_co2_server
print(kco2_total_emissions)
#+end_SRC

#+RESULTS:
: 17.500898461714

*** Saving results to summary CSV
#+begin_SRC python :results value :session *Python* :exports both
import pandas as pd
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2021,
             'method':'iea',
             'kco2_cost_laptop':sum_co2_laptops,
             'kco2_cost_network':sum_co2_network,
             'kco2_cost_server':sum_co2_server,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year      method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021  travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021         iea          9.269246           6.484279          1.747373        17.500898

*** Plotting some results
**** Comulative co2 emissions per participant
Sorted by increasing co2 emissions

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
cpy_df_participants['kco2_total_emissions'] = cpy_df_participants['kco2_emissions_laptops'] + cpy_df_participants['kco2_emissions_network']
sorted_cpy_df_participants=cpy_df_participants.sort_values('kco2_total_emissions').reset_index(drop=True)
sorted_cpy_df_participants['kco2_cum_total_emissions']=sorted_cpy_df_participants['kco2_total_emissions'].cumsum()
total_nb_part=len(sorted_cpy_df_participants.index)
#percentile
sorted_cpy_df_participants['percentile']=sorted_cpy_df_participants.index/total_nb_part
sorted_cpy_df_participants=sorted_cpy_df_participants.to_numeric(errors='ignore')
sorted_cpy_df_participants
#+end_SRC

#+RESULTS:
#+begin_example
           Country   1A   1B   1C   2A   2B  ...  kco2_emissions_laptops  kco2_emissions_network  kco2_emissions_server  kco2_total_emissions  kco2_cum_total_emissions  percentile
0           France  0.0  0.0  0.0  0.0  0.0  ...                0.001686                0.003406               0.004275              0.005092                  0.005092    0.000000
1           Sweden  0.0  0.0  0.0  0.0  0.0  ...                0.000581                0.005657               0.008550              0.006237                  0.011329    0.007246
2            Italy  0.0  0.0  0.0  0.0  0.0  ...                0.004695                0.003747               0.002850              0.008442                  0.019772    0.014493
3          Croatia  0.0  0.0  0.0  0.0  0.0  ...                0.004415                0.004535               0.004275              0.008950                  0.028721    0.021739
4           France  0.0  0.0  0.0  0.0  0.0  ...                0.003278                0.006621               0.008311              0.009899                  0.038620    0.028986
..             ...  ...  ...  ...  ...  ...  ...                     ...                     ...                    ...                   ...                       ...         ...
133         Turkey  1.0  1.0  1.0  1.0  1.0  ...                0.242962                0.142475               0.066263              0.385437                 13.134311    0.963768
134         Poland  0.0  0.0  0.0  1.0  0.0  ...                0.338328                0.179061               0.061748              0.517389                 13.651700    0.971014
135         Brazil  1.0  1.0  0.0  0.0  0.0  ...                0.411026                0.241028               0.112098              0.652053                 14.303753    0.978261
136  United States  0.0  0.0  0.0  1.0  0.0  ...                0.417122                0.244603               0.113761              0.661725                 14.965479    0.985507
137         Poland  0.0  0.0  0.0  1.0  1.0  ...                0.515315                0.272732               0.094050              0.788047                 15.753526    0.992754

[138 rows x 46 columns]
#+end_example

I need to calculate the ~nb_hours~ per participant, so i can use the dot size to
show this value

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_days=conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

sorted_cpy_df_participants['nb_hours'] = 0.0
for day in conf_days:
    day_nb_hours=df_hours_att.loc[df_hours_att['Session']==day]['NB_hours'].values[0]
    #kwh_h_laptop=scenario['Devices'].values[0]
    sorted_cpy_df_participants['nb_hours'] = sorted_cpy_df_participants['nb_hours'] + (sorted_cpy_df_participants[day] * day_nb_hours)
sorted_cpy_df_participants['nb_hours']
#+end_SRC

#+RESULTS:
#+begin_example
0       1.5000
1       3.0000
2       1.0000
3       1.5000
4       2.9160
        ...
133    23.2500
134    21.6660
135    39.3326
136    39.9160
137    33.0000
Name: nb_hours, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results file link :session *Python* :file EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country.png :output-dir ./Figures
import seaborn as sns
import matplotlib.pyplot as plt

FIG_PATH='./Figures/EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country.png'

SMALL_SIZE = 5
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
FIG_WIDTH = 5
FIG_HEIGHT = 3
SCATTERPLOT_POINT_SIZE=8

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
scatterplot_kwargs={'palette': 'plasma'}


plt.clf()
plt.figure(figsize=(FIG_WIDTH,FIG_HEIGHT))
ax = sns.scatterplot(x='percentile', y='kco2_cum_total_emissions', hue='Country', size='nb_hours', data=sorted_cpy_df_participants, **scatterplot_kwargs)
ax.legend(title='Country (color) and Number of Hours (size)', loc='upper center', fancybox=True, shadow=False, ncol=6, bbox_to_anchor=(0.5, -0.2), markerscale=0.5)
ax.set_title('Euro-Par 2021: Estimated CO2 emissions: Network and Laptops')
ax.set_xlabel('% of participants (sorted by per participant CO2 emissions)')
ax.set_ylabel('Comulative CO2 emissions (kCO2)')
fig = ax.get_figure()
fig.tight_layout()
fig.savefig(FIG_PATH, format='png', dpi=300, bbox_inches='tight')
FIG_PATH
#+end_SRC

#+RESULTS:
[[file:./Figures/EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country.png]]

I actually need to plot without the countries that are using the world average ~ghg_intensity~

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_participants_noworldavg=sorted_cpy_df_participants.loc[sorted_cpy_df_participants['ghg_intensity']!=kco2_kwh_worldavg*grams_one_kilo].copy().reset_index(drop=True)
total_nb_part=len(df_participants_noworldavg.index)
#percentile
df_participants_noworldavg['percentile']=df_participants_noworldavg.index/total_nb_part
df_participants_noworldavg
#+end_SRC

#+RESULTS:
#+begin_example
     Country   1A   1B   1C   2A   2B   2C  ...  kco2_emissions_laptops  kco2_emissions_network  kco2_emissions_server  kco2_total_emissions  kco2_cum_total_emissions  percentile  nb_hours
0     France  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.001686                0.003406               0.004275              0.005092                  0.005092    0.000000    1.5000
1     Sweden  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.000581                0.005657               0.008550              0.006237                  0.011329    0.012346    3.0000
2      Italy  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.004695                0.003747               0.002850              0.008442                  0.019772    0.024691    1.0000
3    Croatia  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.004415                0.004535               0.004275              0.008950                  0.028721    0.037037    1.5000
4     France  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.003278                0.006621               0.008311              0.009899                  0.038620    0.049383    2.9160
..       ...  ...  ...  ...  ...  ...  ...  ...                     ...                     ...                    ...                   ...                       ...         ...       ...
76    Poland  0.0  0.0  0.0  0.0  0.0  0.0  ...                0.187387                0.099175               0.034200              0.286563                 11.684278    0.938272   12.0000
77    Poland  1.0  0.0  0.0  1.0  0.0  0.0  ...                0.227707                0.120515               0.041559              0.348221                 12.364059    0.950617   14.5820
78  Portugal  0.0  1.0  0.0  1.0  1.0  0.0  ...                0.210595                0.174220               0.137509              0.384815                 12.748874    0.962963   48.2486
79    Poland  0.0  0.0  0.0  1.0  0.0  1.0  ...                0.338328                0.179061               0.061748              0.517389                 13.651700    0.975309   21.6660
80    Poland  0.0  0.0  0.0  1.0  1.0  1.0  ...                0.515315                0.272732               0.094050              0.788047                 15.753526    0.987654   33.0000

[81 rows x 47 columns]
#+end_example

#+begin_SRC python :results file link :session *Python* :file EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country_noworldavg.png :output-dir ./Figures
import seaborn as sns
import matplotlib.pyplot as plt

FIG_PATH='./Figures/EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country_noworldavg.png'

SMALL_SIZE = 5
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
FIG_WIDTH = 5
FIG_HEIGHT = 3
SCATTERPLOT_POINT_SIZE=8

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
palette=sns.color_palette('viridis', df_participants_noworldavg['Country'].drop_duplicates().shape[0])
scatterplot_kwargs={'palette': palette}


plt.clf()
plt.figure(figsize=(FIG_WIDTH,FIG_HEIGHT))
ax = sns.scatterplot(x='percentile', y='kco2_cum_total_emissions', hue='Country', size='nb_hours', data=df_participants_noworldavg, **scatterplot_kwargs)
ax.legend(title='Country (color) and Number of Hours (size)', loc='upper center', fancybox=True, shadow=False, ncol=6, bbox_to_anchor=(0.5, -0.2), markerscale=0.5)
ax.set_title('Euro-Par 2021: Estimated CO2 emissions: Network and Laptops')
ax.set_xlabel('% of participants (sorted by per participant CO2 emissions)')
ax.set_ylabel('Comulative CO2 emissions (kCO2)')
fig = ax.get_figure()
fig.tight_layout()
fig.savefig(FIG_PATH, format='png', dpi=300, bbox_inches='tight')
FIG_PATH
#+end_SRC

#+RESULTS:
[[file:./Figures/EXP_europar_2021_virtual_per_participant_emissions_iea_model_cumul_emissions_country_noworldavg.png]]

** Experiment ~EXP_europar_2020_virtual_per_participant_emissions_iea_model~
*** Reading participants data

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_participants=pd.read_csv('./data/Euro-Par2020-Country-TotalParticipation.csv')
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation
0     Poland                          268
1      Italy                           55
2     Poland                          726
3      India                           60
4    Germany                          120
..       ...                          ...
266  Hungary                            5
267    Spain                           30
268   Poland                           12
269   Poland                          442
270   Poland                          107

[271 rows x 2 columns]
#+end_example

*** Reading session stats
This is used to calculate the server emissions

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_stats=pd.read_csv('./data/Euro-Par2020-SessionStats.csv')
df_stats
#+end_SRC

#+RESULTS:
#+begin_example
                               Topic     Webinar ID      Actual Start Time  Actual Duration (minutes)  # Registered  # Cancelled  Unique Viewers  Total Users  Max Concurrent Views
0              Euro-Par 2020: Room A  999 4787 9910   Aug 26, 2020 1:29 PM                        299            67            0              65          122                     0
1              Euro-Par 2020: Room A  999 4787 9910   Aug 25, 2020 8:23 AM                        527            63            0              58          163                    23
2              Euro-Par 2020: Room A  999 4787 9910  Aug 27, 2020 12:33 PM                        394           141            0             138          253                     0
3              Euro-Par 2020: Room B  948 7032 8722   Aug 24, 2020 8:27 AM                        258            24            0              24           69                     0
4              Euro-Par 2020: Room A  999 4787 9910  Aug 28, 2020 12:24 PM                        363            43            0              43           96                     0
5              Euro-Par 2020: Room B  948 7032 8722   Aug 26, 2020 1:31 PM                        233            42            0              41           76                     0
6              Euro-Par 2020: Room B  948 7032 8722   Aug 27, 2020 2:06 PM                        315            36            0              32           72                     0
7   Euro-Par 2020 Rehearsal: Track A  912 2849 8739  Aug 19, 2020 11:56 AM                        135            54            0              51          145                     0
8              Euro-Par 2020: Room A  999 4787 9910   Aug 24, 2020 8:29 AM                        447            61            0              54          154                     0
9              Euro-Par 2020: Room B  948 7032 8722   Aug 28, 2020 2:33 PM                        217            21            0              20           45                     0
10             Euro-Par 2020: Room B  948 7032 8722   Aug 25, 2020 1:01 PM                        241            25            0              25           65                     0
#+end_example

*** Reading the EU carbon emission intensity

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_co2_kwh_eu=pd.read_csv('./data/co2-emission-intensity-9.csv')
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Date:year']==2020]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Greenhouse gas emission (GHG) intensity:number'].notna()]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Member State:text']!='EU-27']
df_co2_kwh_eu=df_co2_kwh_eu[['Date:year', 'Member State:text', 'Greenhouse gas emission (GHG) intensity:number']]
df_co2_kwh_eu.columns=['year', 'country', 'gco2_ghg_intensity']
df_co2_kwh_eu
#+end_SRC

#+RESULTS:
#+begin_example
    year      country gco2_ghg_intensity
0   2020       Greece              479.2
1   2020     Bulgaria              410.4
2   2020      Croatia              133.8
3   2020     Portugal              198.4
4   2020       France               51.1
6   2020  Netherlands              328.4
7   2020      Estonia              774.9
9   2020      Germany              311.0
10  2020    Lithuania               45.4
11  2020       Poland              709.8
14  2020       Sweden                8.8
15  2020        Italy              213.4
16  2020      Ireland              278.6
17  2020      Czechia              436.6
19  2020      Belgium              161.0
20  2020      Austria               82.4
22  2020       Latvia              106.5
23  2020        Malta              379.0
24  2020      Hungary              216.4
25  2020      Finland               68.6
26  2020     Slovakia              101.7
28  2020      Denmark              109.0
29  2020     Slovenia              217.8
30  2020        Spain              156.4
31  2020   Luxembourg               58.5
32  2020      Romania              299.5
33  2020       Cyprus              620.9
#+end_example

*** Reading iea model
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_iea_model=pd.read_csv('./data/electricity-per-hour-of-streaming-video-shift-project-compared-to-different-use-cases-2019.csv',skiprows=3)
scenario=df_iea_model.loc[df_iea_model['Scenario']=='Laptop, WiFi, HD']
df_iea_model
#+end_SRC

#+RESULTS:
:                     Scenario  Data centres  Data transmission  Devices
: 0   Shift Project (original)        0.7776             5.2704   0.0128
: 1  Shift Project (corrected)        0.0972             0.6588   0.0128
: 2     IEA average (original)        0.0138             0.1084   0.0555
: 3      IEA average (updated)        0.0037             0.0177   0.0555
: 4          50'' TV, WiFi, 4K        0.0139             0.0182   0.1200
: 5           Laptop, WiFi, HD        0.0060             0.0182   0.0220
: 6          Phone, 4G, 'Auto'        0.0005             0.0085   0.0012

*** Crossing participants with GHG intensity
At this point, we will use the world average for countries that we have missing
GHG intensity data. This can change in the future.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000
kco2_kwh_worldavg=0.475
joined_df_participants=pd.merge(df_participants, df_co2_kwh_eu, how='left', left_on='Country', right_on='country')
joined_df_participants=joined_df_participants.loc[:, ~joined_df_participants.columns.isin(['year','country'])]

## Filling NaNs with worldavg, this can be changed
joined_df_participants=joined_df_participants.fillna(kco2_kwh_worldavg*grams_one_kilo)
df_participants=joined_df_participants
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity
0     Poland                          268              709.8
1      Italy                           55              213.4
2     Poland                          726              709.8
3      India                           60              475.0
4    Germany                          120              311.0
..       ...                          ...                ...
266  Hungary                            5              216.4
267    Spain                           30              156.4
268   Poland                           12              709.8
269   Poland                          442              709.8
270   Poland                          107              709.8

[271 rows x 3 columns]
#+end_example

*** Calculating the cost of laptops
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
minutes_one_hour=60
cpy_df_participants=df_participants.copy()

#cpy_df_participants['kco2_emissions_laptops'] = 0.0
## converting gco2 to kco2
kco2_kwh_ghg_intensity=pd.to_numeric(cpy_df_participants['gco2_ghg_intensity'], errors='ignore')/grams_one_kilo
#print(kco2_kwh_ghg_intensity)
kwh_h_laptop=scenario['Devices'].values[0]
cpy_df_participants['kco2_emissions_laptops'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_laptop * kco2_kwh_ghg_intensity
cpy_df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity  kco2_emissions_laptops
0     Poland                          268              709.8                0.069750
1      Italy                           55              213.4                0.004304
2     Poland                          726              709.8                0.188949
3      India                           60              475.0                0.010450
4    Germany                          120              311.0                0.013684
..       ...                          ...                ...                     ...
266  Hungary                            5              216.4                0.000397
267    Spain                           30              156.4                0.001720
268   Poland                           12              709.8                0.003123
269   Poland                          442              709.8                0.115035
270   Poland                          107              709.8                0.027848

[271 rows x 4 columns]
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_laptops=cpy_df_participants['kco2_emissions_laptops'].sum()
print(sum_co2_laptops)
#+end_SRC

#+RESULTS:
: 9.072270423333332

*** Calculating the cost of network
Here i'm using the co2 intensity as an average of the co2 intensity of the
participant's country and Poland.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

host_country='Poland'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['gco2_ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['gco2_ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2
#print(kco2_kwh_ghg_intensity)
kwh_h_network=scenario['Data transmission'].values[0]
cpy_df_participants['kco2_emissions_network'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_network * kco2_kwh_ghg_intensity
cpy_df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity  kco2_emissions_laptops  kco2_emissions_network
0     Poland                          268              709.8                0.069750                0.057702
1      Italy                           55              213.4                0.004304                0.007701
2     Poland                          726              709.8                0.188949                0.156312
3      India                           60              475.0                0.010450                0.010782
4    Germany                          120              311.0                0.013684                0.018579
..       ...                          ...                ...                     ...                     ...
266  Hungary                            5              216.4                0.000397                0.000702
267    Spain                           30              156.4                0.001720                0.003941
268   Poland                           12              709.8                0.003123                0.002584
269   Poland                          442              709.8                0.115035                0.095165
270   Poland                          107              709.8                0.027848                0.023038

[271 rows x 5 columns]
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_network=cpy_df_participants['kco2_emissions_network'].sum()
print(sum_co2_network)
#+end_SRC

#+RESULTS:
: 9.199432135833334

*** Calculating the cost of the server
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
#df_stats['kco2_emissions_server']=df_stats['Actual Duration (minutes)']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_stats
kwh_h_server=scenario['Data centres'].values[0]
host_country='Poland'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['gco2_ghg_intensity'].values[0]) / grams_one_kilo
cpy_df_participants['kco2_emissions_server'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_server * kco2_kwh_ghg_intensity_host
cpy_df_participants['kco2_emissions_server']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.019023
1      0.003904
2      0.051531
3      0.004259
4      0.008518
         ...
266    0.000355
267    0.002129
268    0.000852
269    0.031373
270    0.007595
Name: kco2_emissions_server, Length: 271, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_server=cpy_df_participants['kco2_emissions_server'].sum()
print(sum_co2_server)
#+end_SRC

#+RESULTS:
: 3.59130408

*** Total emissions (network+laptops+server)
I just need to sum the values

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
kco2_total_emissions=sum_co2_network+sum_co2_laptops+sum_co2_server
print(kco2_total_emissions)
#+end_SRC

#+RESULTS:
: 21.863006639166667

*** Saving results to summary CSV
#+begin_SRC python :results value :session *Python* :exports both
import pandas as pd
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2020,
             'method':'iea',
             'kco2_cost_laptop':sum_co2_laptops,
             'kco2_cost_network':sum_co2_network,
             'kco2_cost_server':sum_co2_server,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year      method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021  travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021         iea          9.269246           6.484279          1.747373        17.500898
: 2  2021         iea          9.072270           9.199432          3.591304        21.863007
** Experiment ~EXP_europar_2021_virtual_per_participant_emissions_nature_model~
*** Reading participants data
This data is given by Leonel. Here i'm only interested in the participant's
country, and the attendance per day. We have data about attendance per session
but i'm not using it for the moment.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_participants=pd.read_csv('./data/Euro-Par2021-1630695535.csv')
## getting only the country and the sessions attendance
columns=['Country','1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

df_participants=df_participants[columns]
## getting only the country and the attendance per day
#df_participants=df_participants[['Country','30/08/2021','31/08/2021','01/09/2021','02/09/2021','03/09/2021']]
## filtering dashes
df_participants=df_participants.loc[~df_participants['Country'].str.contains('-')]
## filling nans with zeros
df_participants=df_participants.fillna(0.0)
## renaming columns
df_participants.columns=columns
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
           Country   1A   1B   1C   2A   2B   2C   3A   3B   3C   4A   4B   4C    5   6A   6B   7A  ...   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26
0          Czechia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  1.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
1           Sweden  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0
4            Italy  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
6           France  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
9               UK  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
..             ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...
155         Greece  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  1.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
157        Germany  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  1.0  ...  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  0.0
159   Saudi Arabia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
160  United States  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
161      Hong Kong  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  1.0  0.0  0.0  ...  0.0  1.0  1.0  1.0  1.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0

[138 rows x 39 columns]
#+end_example

*** Reading number of hours per conference session

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_hours_att=pd.read_csv('./data/europar2021-sessions-nbhours-attendance.csv')
df_hours_att
#+end_SRC

#+RESULTS:
#+begin_example
   Session  NB_hours  Attendance Comment
0       1A    1.5000          27        measured from conf site
1       1B    1.5000          21        measured from conf site
2       1C    1.5000          19   measured from conf site
3       2A    7.0000          28        measured from conf site
4       2B    7.5000          18        measured from conf site
5       2C    1.5000          19        measured from conf site
6       3A    1.5000          26        measured from conf site
7       3B    1.5000          24        measured from conf site
8       3C    1.5000          28        measured from conf site
9       4A    1.2500          23          COLOC 3:15 PM-4:30 PM
10      4B    1.2500          20        measured from conf site
11      4C    1.2500          19        measured from conf site
12       5    1.0000          16          COLOC 4:30 PM-5:30 PM
13      6A    1.5000          33        measured from conf site
14      6B    1.5000          13        measured from conf site
15      7A    1.6660          37        measured from conf site
16      7B    1.6660          20        measured from conf site
17      8A    1.2500          37        measured from conf site
18      8B    1.4166          20        measured from conf site
19      9A    1.7500          29        measured from conf site
20      9B    1.2500          20          LSDVE 3:15 PM-4:30 PM
21      10    0.5000          12          LSDVE 4:30 PM-5:00 PM
22      11    0.5000          48        measured from conf site
23      12    1.5000          52        measured from conf site
24      13    1.5000          49        measured from conf site
25      14    1.0000          59        measured from conf site
26      15    1.5000          48        measured from conf site
27      16    1.5000          42        measured from conf site
28      17    1.5000          40        measured from conf site
29      18    1.5000          41        measured from conf site
30      19    1.0000          40        measured from conf site
31      20    1.5000          30        measured from conf site
32      21    1.5000          45        measured from conf site
33      22    1.5000          30        measured from conf site
34      23    1.5000          35        measured from conf site
35      24    1.0000          43        measured from conf site
36      25    1.5000          33        measured from conf site
37      26    0.5000          29        measured from conf site
#+end_example

*** Reading the EU carbon emission intensity

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_co2_kwh_eu=pd.read_csv('./data/co2-emission-intensity-9.csv')
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Date:year']==2020]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Greenhouse gas emission (GHG) intensity:number'].notna()]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Member State:text']!='EU-27']
df_co2_kwh_eu=df_co2_kwh_eu[['Date:year', 'Member State:text', 'Greenhouse gas emission (GHG) intensity:number']]
df_co2_kwh_eu.columns=['year', 'country', 'ghg_intensity']
df_co2_kwh_eu
#+end_SRC

#+RESULTS:
#+begin_example
    year      country ghg_intensity
0   2020       Greece         479.2
1   2020     Bulgaria         410.4
2   2020      Croatia         133.8
3   2020     Portugal         198.4
4   2020       France          51.1
6   2020  Netherlands         328.4
7   2020      Estonia         774.9
9   2020      Germany         311.0
10  2020    Lithuania          45.4
11  2020       Poland         709.8
14  2020       Sweden           8.8
15  2020        Italy         213.4
16  2020      Ireland         278.6
17  2020      Czechia         436.6
19  2020      Belgium         161.0
20  2020      Austria          82.4
22  2020       Latvia         106.5
23  2020        Malta         379.0
24  2020      Hungary         216.4
25  2020      Finland          68.6
26  2020     Slovakia         101.7
28  2020      Denmark         109.0
29  2020     Slovenia         217.8
30  2020        Spain         156.4
31  2020   Luxembourg          58.5
32  2020      Romania         299.5
33  2020       Cyprus         620.9
#+end_example

*** Setting up the nature model
 #+begin_SRC python :results output :session *Python* :eval no-export :exports results
GRAMS_ONE_KILO=1000
MB_ONE_GB=1024
BIT_ONE_BYTE=8
SEC_ONE_HOUR=3600

## laptop power
laptop_power_watts=30
laptop_power_kw=laptop_power_watts/1000

## server power
server_power_watts=300
server_power_kw=server_power_watts/1000
## data rate of a zoom webinar
mbps_vid_bandwidth=1.2
## kwh per GB
kwh_per_GB=0.06
## converting mbps to GBph
GBph_vid_bandwidth=mbps_vid_bandwidth * SEC_ONE_HOUR * (1/BIT_ONE_BYTE) * (1/MB_ONE_GB)
## co2 emissions fom electricity production in Portugal
kco2_kwh_portugal=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country']=='Portugal']['ghg_intensity'].values[0])/GRAMS_ONE_KILO
#kco2_kwh_portugal
#+end_SRC

#+RESULTS:

*** Crossing participants with GHG intensity
At this point, we will use the world average for countries that we have missing
GHG intensity data. This can change in the future.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000
kco2_kwh_worldavg=0.475
joined_df_participants=pd.merge(df_participants, df_co2_kwh_eu, how='left', left_on='Country', right_on='country')
joined_df_participants=joined_df_participants.loc[:, ~joined_df_participants.columns.isin(['year','country'])]

## Filling NaNs with worldavg, this can be changed
joined_df_participants=joined_df_participants.fillna(kco2_kwh_worldavg*grams_one_kilo)
df_participants=joined_df_participants
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
           Country   1A   1B   1C   2A   2B   2C   3A   3B   3C   4A   4B   4C    5   6A   6B  ...   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26  ghg_intensity
0          Czechia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          436.6
1           Sweden  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0            8.8
2            Italy  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          213.4
3           France  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0           51.1
4               UK  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
..             ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...            ...
133         Greece  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          479.2
134        Germany  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  0.0          311.0
135   Saudi Arabia  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
136  United States  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0          475.0
137      Hong Kong  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  1.0  0.0  ...  1.0  1.0  1.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0          475.0

[138 rows x 40 columns]
#+end_example

*** Calculating the cost of laptops

It's similar from the cost of the network. I'm using the value of 475gCO2/KWh,
which was the global average of CO2 intensity of electricity generation of 2019.
(source: https://www.iea.org/reports/global-energy-co2-status-report-2019/emissions)
and up to 30W of laptop power consumption
(source: https://link.springer.com/chapter/10.1007/11574859_12)

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
cpy_df_participants=df_participants.copy()

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_laptops'] = 0.0
## converting gco2 to kco2
kco2_kwh_ghg_intensity=pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore')/1000
kwh_h_laptop=laptop_power_kw
#print(kco2_kwh_ghg_intensity)
for session in conf_sessions:
    sess_nb_hours=df_hours_att.loc[df_hours_att['Session']==session]['NB_hours'].values[0]
    cpy_df_participants['kco2_emissions_laptops'] = cpy_df_participants['kco2_emissions_laptops'] + (cpy_df_participants[session] * sess_nb_hours * kwh_h_laptop * kco2_kwh_ghg_intensity)
#kwh_h_laptop
cpy_df_participants['kco2_emissions_laptops']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.078588
1      0.001584
2      0.016005
3      0.017629
4      0.065302
         ...
133    0.071880
134    0.176486
135    0.064125
136    0.021375
137    0.285000
Name: kco2_emissions_laptops, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_laptops=cpy_df_participants['kco2_emissions_laptops'].sum()
print(sum_co2_laptops)
#+end_SRC

#+RESULTS:
: 12.639881548199998

*** Calculating the cost of network
Here i'm using the co2 intensity as an average of the co2 intensity of the
participant's country and Lisbon.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_network'] = 0.0
host_country='Portugal'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2

kwh_h_network=GBph_vid_bandwidth*kwh_per_GB
#print(kco2_kwh_ghg_intensity)
for session in conf_sessions:
    day_nb_hours=df_hours_att.loc[df_hours_att['Session']==session]['NB_hours'].values[0]
    #df_hours_att['kco2_emissions_network']=df_hours_att['NB_hours']*df_hours_att['Attendance']*GBph_vid_bandwidth*kwh_per_GB*kco2_kwh_portugal
    cpy_df_participants['kco2_emissions_network'] = cpy_df_participants['kco2_emissions_network'] + (cpy_df_participants[session] * day_nb_hours * kwh_h_network * kco2_kwh_ghg_intensity)
cpy_df_participants['kco2_emissions_network']
#+end_SRC

#+RESULTS:
#+begin_example
0      0.060275
1      0.019668
2      0.016287
3      0.045392
4      0.048820
         ...
133    0.053599
134    0.152442
135    0.047940
136    0.015980
137    0.213068
Name: kco2_emissions_network, Length: 138, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_network=cpy_df_participants['kco2_emissions_network'].sum()
print(sum_co2_network)
#+end_SRC

#+RESULTS:
: 11.272892856433593
*** Calculating the cost of the server
I need to do this with the participants attendance. It will be more semantically
correct.

I believe that the iea data center data is per person, hence we need to
multiply with ~Attendance~ as well. There is a "Calculate your emissions" part
at their site
(https://www.iea.org/commentaries/the-carbon-footprint-of-streaming-video-fact-checking-the-headlines)
that just performs a multiplication ~hours x kwh/h_server x co2_intensity~. It
estimates emissions for one person.
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
#df_hours_att['kco2_emissions_server']=df_hours_att['NB_hours']*df_hours_att['Attendance']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_hours_att['kco2_emissions_server']=df_hours_att['NB_hours']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_hours_att
#+end_SRC

#+RESULTS:

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

## using an inefficent for to calculate, this is fine for the size of the dataframe
conf_sessions=['1A','1B','1C','2A','2B','2C','3A','3B','3C','4A','4B','4C','5','6A','6B','7A','7B','8A','8B','9A','9B','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26']

#conf_days=['2021-08-30','2021-08-31','2021-09-01','2021-09-02','2021-09-03']
cpy_df_participants['kco2_emissions_server'] = 0.0
host_country='Portugal'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
#kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2
kco2_kwh_ghg_intensity=kco2_kwh_ghg_intensity_host
#print(kco2_kwh_ghg_intensity)
df_hours_att['kco2_emissions_server']=df_hours_att['NB_hours']*server_power_kw*kco2_kwh_ghg_intensity
df_hours_att
#+end_SRC

#+RESULTS:
#+begin_example
   Session  NB_hours  Attendance Comment                         kco2_emissions_server
0       1A    1.5000          27        measured from conf site               0.089280
1       1B    1.5000          21        measured from conf site               0.089280
2       1C    1.5000          19   measured from conf site                    0.089280
3       2A    7.0000          28        measured from conf site               0.416640
4       2B    7.5000          18        measured from conf site               0.446400
5       2C    1.5000          19        measured from conf site               0.089280
6       3A    1.5000          26        measured from conf site               0.089280
7       3B    1.5000          24        measured from conf site               0.089280
8       3C    1.5000          28        measured from conf site               0.089280
9       4A    1.2500          23          COLOC 3:15 PM-4:30 PM               0.074400
10      4B    1.2500          20        measured from conf site               0.074400
11      4C    1.2500          19        measured from conf site               0.074400
12       5    1.0000          16          COLOC 4:30 PM-5:30 PM               0.059520
13      6A    1.5000          33        measured from conf site               0.089280
14      6B    1.5000          13        measured from conf site               0.089280
15      7A    1.6660          37        measured from conf site               0.099160
16      7B    1.6660          20        measured from conf site               0.099160
17      8A    1.2500          37        measured from conf site               0.074400
18      8B    1.4166          20        measured from conf site               0.084316
19      9A    1.7500          29        measured from conf site               0.104160
20      9B    1.2500          20          LSDVE 3:15 PM-4:30 PM               0.074400
21      10    0.5000          12          LSDVE 4:30 PM-5:00 PM               0.029760
22      11    0.5000          48        measured from conf site               0.029760
23      12    1.5000          52        measured from conf site               0.089280
24      13    1.5000          49        measured from conf site               0.089280
25      14    1.0000          59        measured from conf site               0.059520
26      15    1.5000          48        measured from conf site               0.089280
27      16    1.5000          42        measured from conf site               0.089280
28      17    1.5000          40        measured from conf site               0.089280
29      18    1.5000          41        measured from conf site               0.089280
30      19    1.0000          40        measured from conf site               0.059520
31      20    1.5000          30        measured from conf site               0.089280
32      21    1.5000          45        measured from conf site               0.089280
33      22    1.5000          30        measured from conf site               0.089280
34      23    1.5000          35        measured from conf site               0.089280
35      24    1.0000          43        measured from conf site               0.059520
36      25    1.5000          33        measured from conf site               0.089280
37      26    0.5000          29        measured from conf site               0.029760
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_server=df_hours_att['kco2_emissions_server'].sum()
print(sum_co2_server)
#+end_SRC

#+RESULTS:
: 3.7347966720000003
*** Total emissions (network+laptops+server)
I just need to sum the values

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
kco2_total_emissions=sum_co2_network+sum_co2_laptops+sum_co2_server
print(kco2_total_emissions)
#+end_SRC

#+RESULTS:
: 27.647571076633593

*** Saving results to summary CSV
#+begin_SRC python :results value :session *Python* :exports both
import pandas as pd
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2021,
             'method':'neture',
             'kco2_cost_laptop':sum_co2_laptops,
             'kco2_cost_network':sum_co2_network,
             'kco2_cost_server':sum_co2_server,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year      method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021  travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021         iea          9.269246           6.484279          1.747373        17.500898
: 2  2021         iea          9.072270           9.199432          3.591304        21.863007
: 3  2021         iea         12.639882          11.272893          3.734797        27.647571
** Experiment ~EXP_europar_2020_virtual_per_participant_emissions_nature_model~
*** Reading participants data

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
import pandas as pd

df_participants=pd.read_csv('./data/Euro-Par2020-Country-TotalParticipation.csv')
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation
0     Poland                          268
1      Italy                           55
2     Poland                          726
3      India                           60
4    Germany                          120
..       ...                          ...
266  Hungary                            5
267    Spain                           30
268   Poland                           12
269   Poland                          442
270   Poland                          107

[271 rows x 2 columns]
#+end_example
*** Reading session stats
This is used to calculate the server emissions

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_stats=pd.read_csv('./data/Euro-Par2020-SessionStats.csv')
df_stats
#+end_SRC

#+RESULTS:
#+begin_example
                               Topic     Webinar ID      Actual Start Time  Actual Duration (minutes)  # Registered  # Cancelled  Unique Viewers  Total Users  Max Concurrent Views
0              Euro-Par 2020: Room A  999 4787 9910   Aug 26, 2020 1:29 PM                        299            67            0              65          122                     0
1              Euro-Par 2020: Room A  999 4787 9910   Aug 25, 2020 8:23 AM                        527            63            0              58          163                    23
2              Euro-Par 2020: Room A  999 4787 9910  Aug 27, 2020 12:33 PM                        394           141            0             138          253                     0
3              Euro-Par 2020: Room B  948 7032 8722   Aug 24, 2020 8:27 AM                        258            24            0              24           69                     0
4              Euro-Par 2020: Room A  999 4787 9910  Aug 28, 2020 12:24 PM                        363            43            0              43           96                     0
5              Euro-Par 2020: Room B  948 7032 8722   Aug 26, 2020 1:31 PM                        233            42            0              41           76                     0
6              Euro-Par 2020: Room B  948 7032 8722   Aug 27, 2020 2:06 PM                        315            36            0              32           72                     0
7   Euro-Par 2020 Rehearsal: Track A  912 2849 8739  Aug 19, 2020 11:56 AM                        135            54            0              51          145                     0
8              Euro-Par 2020: Room A  999 4787 9910   Aug 24, 2020 8:29 AM                        447            61            0              54          154                     0
9              Euro-Par 2020: Room B  948 7032 8722   Aug 28, 2020 2:33 PM                        217            21            0              20           45                     0
10             Euro-Par 2020: Room B  948 7032 8722   Aug 25, 2020 1:01 PM                        241            25            0              25           65                     0
#+end_example
*** Reading the EU carbon emission intensity

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
df_co2_kwh_eu=pd.read_csv('./data/co2-emission-intensity-9.csv')
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Date:year']==2020]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Greenhouse gas emission (GHG) intensity:number'].notna()]
df_co2_kwh_eu=df_co2_kwh_eu.loc[df_co2_kwh_eu['Member State:text']!='EU-27']
df_co2_kwh_eu=df_co2_kwh_eu[['Date:year', 'Member State:text', 'Greenhouse gas emission (GHG) intensity:number']]
df_co2_kwh_eu.columns=['year', 'country', 'gco2_ghg_intensity']
df_co2_kwh_eu
#+end_SRC

#+RESULTS:
#+begin_example
    year      country gco2_ghg_intensity
0   2020       Greece              479.2
1   2020     Bulgaria              410.4
2   2020      Croatia              133.8
3   2020     Portugal              198.4
4   2020       France               51.1
6   2020  Netherlands              328.4
7   2020      Estonia              774.9
9   2020      Germany              311.0
10  2020    Lithuania               45.4
11  2020       Poland              709.8
14  2020       Sweden                8.8
15  2020        Italy              213.4
16  2020      Ireland              278.6
17  2020      Czechia              436.6
19  2020      Belgium              161.0
20  2020      Austria               82.4
22  2020       Latvia              106.5
23  2020        Malta              379.0
24  2020      Hungary              216.4
25  2020      Finland               68.6
26  2020     Slovakia              101.7
28  2020      Denmark              109.0
29  2020     Slovenia              217.8
30  2020        Spain              156.4
31  2020   Luxembourg               58.5
32  2020      Romania              299.5
33  2020       Cyprus              620.9
#+end_example

*** Setting up the nature model
 #+begin_SRC python :results output :session *Python* :eval no-export :exports results
GRAMS_ONE_KILO=1000
MB_ONE_GB=1024
BIT_ONE_BYTE=8
SEC_ONE_HOUR=3600

## laptop power
laptop_power_watts=30
laptop_power_kw=laptop_power_watts/1000

## server power
server_power_watts=300
server_power_kw=server_power_watts/1000
## data rate of a zoom webinar
mbps_vid_bandwidth=1.2
## kwh per GB
kwh_per_GB=0.06
## converting mbps to GBph
GBph_vid_bandwidth=mbps_vid_bandwidth * SEC_ONE_HOUR * (1/BIT_ONE_BYTE) * (1/MB_ONE_GB)
## co2 emissions fom electricity production in Portugal
kco2_kwh_portugal=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country']=='Portugal']['gco2_ghg_intensity'].values[0])/GRAMS_ONE_KILO
#kco2_kwh_portugal
#+end_SRC

#+RESULTS:

*** Crossing participants with GHG intensity
At this point, we will use the world average for countries that we have missing
GHG intensity data. This can change in the future.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000
kco2_kwh_worldavg=0.475
joined_df_participants=pd.merge(df_participants, df_co2_kwh_eu, how='left', left_on='Country', right_on='country')
joined_df_participants=joined_df_participants.loc[:, ~joined_df_participants.columns.isin(['year','country'])]

## Filling NaNs with worldavg, this can be changed
joined_df_participants=joined_df_participants.fillna(kco2_kwh_worldavg*grams_one_kilo)
df_participants=joined_df_participants
df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity
0     Poland                          268              709.8
1      Italy                           55              213.4
2     Poland                          726              709.8
3      India                           60              475.0
4    Germany                          120              311.0
..       ...                          ...                ...
266  Hungary                            5              216.4
267    Spain                           30              156.4
268   Poland                           12              709.8
269   Poland                          442              709.8
270   Poland                          107              709.8

[271 rows x 3 columns]
#+end_example
*** Calculating the cost of laptops
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
minutes_one_hour=60
cpy_df_participants=df_participants.copy()

#cpy_df_participants['kco2_emissions_laptops'] = 0.0
## converting gco2 to kco2
kco2_kwh_ghg_intensity=pd.to_numeric(cpy_df_participants['gco2_ghg_intensity'], errors='ignore')/grams_one_kilo
#print(kco2_kwh_ghg_intensity)
kwh_h_laptop=laptop_power_kw
cpy_df_participants['kco2_emissions_laptops'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_laptop * kco2_kwh_ghg_intensity
cpy_df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity  kco2_emissions_laptops
0     Poland                          268              709.8                0.095113
1      Italy                           55              213.4                0.005868
2     Poland                          726              709.8                0.257657
3      India                           60              475.0                0.014250
4    Germany                          120              311.0                0.018660
..       ...                          ...                ...                     ...
266  Hungary                            5              216.4                0.000541
267    Spain                           30              156.4                0.002346
268   Poland                           12              709.8                0.004259
269   Poland                          442              709.8                0.156866
270   Poland                          107              709.8                0.037974

[271 rows x 4 columns]
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_laptops=cpy_df_participants['kco2_emissions_laptops'].sum()
print(sum_co2_laptops)
#+end_SRC

#+RESULTS:
: 12.371277849999998
*** Calculating the cost of network
Here i'm using the co2 intensity as an average of the co2 intensity of the
participant's country and Poland.

#+begin_SRC python :results value :session *Python* :eval no-export :exports results
grams_one_kilo=1000

host_country='Poland'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['gco2_ghg_intensity'].values[0]) / grams_one_kilo
## converting gco2 to kco2 and averaging with the host country intensity
kco2_kwh_ghg_intensity=((pd.to_numeric(cpy_df_participants['gco2_ghg_intensity'], errors='ignore') / grams_one_kilo) + kco2_kwh_ghg_intensity_host) / 2
#print(kco2_kwh_ghg_intensity)
#kwh_h_network=scenario['Data transmission'].values[0]
kwh_h_network=GBph_vid_bandwidth*kwh_per_GB
cpy_df_participants['kco2_emissions_network'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_network * kco2_kwh_ghg_intensity
cpy_df_participants
#+end_SRC

#+RESULTS:
#+begin_example
     Country  minutes_total_participation gco2_ghg_intensity  kco2_emissions_laptops  kco2_emissions_network
0     Poland                          268              709.8                0.095113                0.100315
1      Italy                           55              213.4                0.005868                0.013388
2     Poland                          726              709.8                0.257657                0.271748
3      India                           60              475.0                0.014250                0.018744
4    Germany                          120              311.0                0.018660                0.032299
..       ...                          ...                ...                     ...                     ...
266  Hungary                            5              216.4                0.000541                0.001221
267    Spain                           30              156.4                0.002346                0.006852
268   Poland                           12              709.8                0.004259                0.004492
269   Poland                          442              709.8                0.156866                0.165444
270   Poland                          107              709.8                0.037974                0.040051

[271 rows x 5 columns]
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_network=cpy_df_participants['kco2_emissions_network'].sum()
print(sum_co2_network)
#+end_SRC

#+RESULTS:
: 15.993174858398438
*** Calculating the cost of the server
#+begin_SRC python :results value :session *Python* :eval no-export :exports results
#df_stats['kco2_emissions_server']=df_stats['Actual Duration (minutes)']*scenario['Data centres'].values[0]*kco2_kwh_worldavg
#df_stats
minutes_one_hour=60
kwh_h_server=server_power_kw
host_country='Poland'
kco2_kwh_ghg_intensity_host=float(df_co2_kwh_eu.loc[df_co2_kwh_eu['country'] == host_country]['gco2_ghg_intensity'].values[0]) / grams_one_kilo
#cpy_df_participants['kco2_emissions_server'] = (cpy_df_participants['minutes_total_participation']/minutes_one_hour) * kwh_h_server * kco2_kwh_ghg_intensity_host
#cpy_df_participants['kco2_emissions_server']

df_stats['kco2_emissions_server']=(df_stats['Actual Duration (minutes)']/minutes_one_hour)*kwh_h_server*kco2_kwh_ghg_intensity_host
df_stats['kco2_emissions_server']
#+end_SRC

#+RESULTS:
#+begin_example
0     1.061151
1     1.870323
2     1.398306
3     0.915642
4     1.288287
5     0.826917
6     1.117935
7     0.479115
8     1.586403
9     0.770133
10    0.855309
Name: kco2_emissions_server, dtype: float64
#+end_example

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
sum_co2_server=df_stats['kco2_emissions_server'].sum()
print(sum_co2_server)
#+end_SRC

#+RESULTS:
: 12.169521

*** Total emissions (network+laptops+server)
I just need to sum the values

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
kco2_total_emissions=sum_co2_network+sum_co2_laptops+sum_co2_server
print(kco2_total_emissions)
#+end_SRC

#+RESULTS:
: 40.533973708398435

*** Saving results to summary CSV
#+begin_SRC python :results value :session *Python* :exports both
import pandas as pd
summary_csv=pd.read_csv('./data/Results-Summary.csv')

dct_results={'year':2020,
             'method':'nature',
             'kco2_cost_laptop':sum_co2_laptops,
             'kco2_cost_network':sum_co2_network,
             'kco2_cost_server':sum_co2_server,
             'kco2_cost_total':kco2_total_emissions
            }
summary_csv=summary_csv.append(dct_results,ignore_index=True)
summary_csv.to_csv('./data/Results-Summary.csv',index=False)
summary_csv
#+end_SRC

#+RESULTS:
:    year      method  kco2_cost_laptop  kco2_cost_network  kco2_cost_server  kco2_cost_total
: 0  2021  travel_est          0.000000           0.000000          0.000000    173252.453000
: 1  2021         iea          9.269246           6.484279          1.747373        17.500898
: 2  2021         iea          9.072270           9.199432          3.591304        21.863007
: 3  2021         iea         12.639882          11.272893          3.734797        27.647571
: 4  2021         iea         12.371278          15.993175         12.169521        40.533974



* Plots
** Reading results csv

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
import pandas as pd

df_results_2021=pd.read_csv('./data/travel_europar_2021_plot_data.csv')
df_results_2021=df_results_2021.apply(pd.to_numeric, errors='ignore')
df_results_2020=pd.read_csv('./data/travel_europar_2020_plot_data.csv')
df_results_2020=df_results_2020.apply(pd.to_numeric, errors='ignore')
#df_results['actual_dst_km']=df_results['dst_lisbon_km']/df_results
print(df_results_2021)
print(df_results_2020)
#+end_SRC

#+RESULTS:
#+begin_example
                 city       country  ...  percent_cum_total_co2_kg    model_set
0              Lisbon      Portugal  ...                  0.000000  Pessimistic
1              Lisbon      Portugal  ...                  0.000000  Pessimistic
2              Lisbon      Portugal  ...                  0.000000  Pessimistic
3              Lisbon      Portugal  ...                  0.000000  Pessimistic
4              Lisbon      Portugal  ...                  0.000000  Pessimistic
..                ...           ...  ...                       ...          ...
269             Seoul   South Korea  ...                  0.912909   Optimistic
270          Suwon-si   South Korea  ...                  0.930933   Optimistic
271          Suwon-si   South Korea  ...                  0.948956   Optimistic
272  Hong Kong Island         China  ...                  0.967859   Optimistic
273          Auckland   New Zealand  ...                  1.000000   Optimistic

[274 rows x 9 columns]
             city     country  ...  percent_cum_total_co2_kg    model_set
0          Warsaw      Poland  ...                  0.000000  Pessimistic
1          Warsaw      Poland  ...                  0.000000  Pessimistic
2          Warsaw      Poland  ...                  0.000000  Pessimistic
3          Warsaw      Poland  ...                  0.000000  Pessimistic
4          Warsaw      Poland  ...                  0.000000  Pessimistic
..            ...         ...  ...                       ...          ...
437   Santo André      Brazil  ...                  0.931541   Optimistic
438  Porto Alegre      Brazil  ...                  0.947159   Optimistic
439   Santa Maria      Brazil  ...                  0.962925   Optimistic
440      La Plata   Argentina  ...                  0.979546   Optimistic
441     Melbourne   Australia  ...                  1.000000   Optimistic

[442 rows x 9 columns]
#+end_example

** Plots: Figure 1

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
import seaborn as sns
import matplotlib.pyplot as plt

cpy_df_results_2020=df_results_2020.copy()
cpy_df_results_2020['co2_per_km']=cpy_df_results_2020['co2_kg']/cpy_df_results_2020['dst_warsaw_km']
cpy_df_results_2020=cpy_df_results_2020.sort_values('dst_warsaw_km')

FIG_PATH='./Figures/europar-2020-travel-emissions-dst-x.pdf'

SMALL_SIZE = 5
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
FIG_WIDTH = 3.5
FIG_HEIGHT = 2
SCATTERPLOT_POINT_SIZE=5

cpy_df_results_2020_fancylabels=cpy_df_results_2020.copy()
cpy_df_results_2020_fancylabels['Model Set']=cpy_df_results_2020_fancylabels['model_set']
cpy_df_results_2020_fancylabels['CO2 per Km']=cpy_df_results_2020_fancylabels['co2_per_km']

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
scatterplot_kwargs={'s': SCATTERPLOT_POINT_SIZE, 'palette':'viridis'}

sns.set_style("whitegrid")
plt.clf()
plt.figure(figsize=(FIG_WIDTH,FIG_HEIGHT))
ax = sns.scatterplot(x='dst_warsaw_km', y='co2_kg', style='Model Set', hue='CO2 per Km', linewidth = 0.0000, data=cpy_df_results_2020_fancylabels, **scatterplot_kwargs)
#ax.legend(title='Travel Distance', loc='upper center', fancybox=True, shadow=False, ncol=6, bbox_to_anchor=(0.5, -0.2), markerscale=0.5)
#ax.legend(title='Travel Distance', loc='upper left', fancybox=True, shadow=False, markerscale=0.5)
ax.set_title('Euro-Par 2020: Estimated travel CO2 emissions')
ax.set_xlabel('Round trip travel distance (Km)')
ax.set_ylabel('Estimated travel emissions (KgCO2e)')
ax.set_xlim(0,41000)
ax.set_ylim(0,6700)
#ax.set_yscale('log')
#ax.set_xscale('log')
fig = ax.get_figure()
fig.tight_layout()
fig.savefig(FIG_PATH, format='pdf', dpi=300, bbox_inches='tight')
FIG_PATH
#+end_src

#+RESULTS:

** Plots: Figure 2

#+begin_SRC python :results output :session *Python* :eval no-export :exports results
import seaborn as sns
import matplotlib.pyplot as plt

cpy_df_results_2021=df_results_2021.copy()
cpy_df_results_2021['co2_per_km']=cpy_df_results_2021['co2_kg']/cpy_df_results_2021['dst_lisbon_km']
cpy_df_results_2021=cpy_df_results_2021.sort_values('dst_lisbon_km')

FIG_PATH='./Figures/europar-2021-travel-emissions-dst-x.pdf'

SMALL_SIZE = 5
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
FIG_WIDTH = 3.5
FIG_HEIGHT = 2
SCATTERPLOT_POINT_SIZE=5

cpy_df_results_2021_fancylabels=cpy_df_results_2021.copy()
cpy_df_results_2021_fancylabels['Model Set']=cpy_df_results_2021_fancylabels['model_set']
cpy_df_results_2021_fancylabels['CO2 per Km']=cpy_df_results_2021_fancylabels['co2_per_km']

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=SMALL_SIZE)     # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
scatterplot_kwargs={'s': SCATTERPLOT_POINT_SIZE, 'palette':'viridis'}

sns.set_style("whitegrid")
plt.clf()
plt.figure(figsize=(FIG_WIDTH,FIG_HEIGHT))
ax = sns.scatterplot(x='dst_lisbon_km', y='co2_kg', style='Model Set', hue='CO2 per Km', data=cpy_df_results_2021_fancylabels, linewidth = 0.0000, **scatterplot_kwargs)
#ax.legend(title='Travel Distance', loc='upper center', fancybox=True, shadow=False, ncol=6, bbox_to_anchor=(0.5, -0.2), markerscale=0.5)
#ax.legend(title='Travel Distance', loc='upper left', fancybox=True, shadow=False, markerscale=0.5)
ax.set_title('Euro-Par 2021: Estimated travel CO2 emissions')
ax.set_xlabel('Round trip travel distance (Km)')
ax.set_ylabel('Estimated travel emissions (KgCO2e)')
ax.set_xlim(0,41000)
ax.set_ylim(0,6700)
#ax.set_yscale('log')
#ax.set_xscale('log', basex=2)
fig = ax.get_figure()
fig.tight_layout()
fig.savefig(FIG_PATH, format='pdf', dpi=300, bbox_inches='tight')
FIG_PATH
#+end_src

#+RESULTS:
